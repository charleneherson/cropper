/*
 * @Author: liangpengfei
 * @Date: 2019/8/10 下午3:11:17
 * @Description: 封装了通过action和native通讯的底层方法
 */
import {hybrid as iframeHybrid} from './iframeHybrid'
import {switchConfig, checkSystem} from "./system"
import {addLog} from './tool'
const win: any = window;
window.__jsBridge = {
    callbackPool: {},
    ack_no: 1
};
window.__jsBridge.invoke = function(_action: any, _data: any, _callback: Function) {
    var rndKey = 'cbk_' + new Date().getTime();
    var fullParam: any = {
        action: _action,
    };
    if (_data) {
        fullParam.param = _data;
    }
    if (_callback) { //如果有回调函数。
        var rndKey = 'cbk_' + window.__jsBridge.ack_no++;
        fullParam.callbackKey = rndKey;
        window.__jsBridge.callbackPool[rndKey] = _callback;
        // 存储 core_windowConfig 这个action调用时，配置分享、回退dialog的回调
        _action == "core_windowConfig" && (window.__jsBridge.callbackPool[_action] = _callback);
    }
    let message = window.__jsBridge.param(fullParam);
    if(window.ZYBJSBridge){
        window.ZYBJSBridge.postMessage(message);

    }else{
        window.webkit.messageHandlers.ZYBJSBridge.postMessage(message);
    }
}

window.__jsBridge.callback = function(_data: any) {
    var callbackKey = _data.callbackKey;
    var func = window.__jsBridge.callbackPool[callbackKey];
    if (typeof func == 'function') {
        //传给回调参数的数据不需要callback函数
        delete _data.callbackKey;
        func(_data);
        // 释放,只用一次
        !func.remove && delete window.__jsBridge.callbackPool.callbackKey;
    }
}
window.__jsBridge.param = function(_data: any) {
    let string = JSON.stringify(_data);
    let object = string ? string : '';
    return object;
}

declare global {
    function hybrid(action: string, params?: any, callback?: Function): any
}
export function hybrid (action: string, params: any, callback?: Function) {
    let androidVC = switchConfig.jsBridge_os_version;
    if(androidVC){
        androidVC = androidVC.substr(0, 3);
    }else {
        androidVC = 10;
    }
    if(checkSystem.isAndroid() && +androidVC < 4.2) {
        addLog(`androidSystem < 4.2 , oldJsBridge, action=${action}`);
        iframeHybrid(action, params, callback);
    }else {
        // 如果第二个参数类型是 Function
        if (params && Object.prototype.toString.call(params) === '[object Function]') {
            callback = <any>params;
            params = {}
        }
        // 如果有定义 回调函数，就挂载到全局，用于端的回调
        callback && (win[action] = callback);
        
        // 调用action
        addLog(`newJsBridge, action=${action}`);
        window.__jsBridge.invoke(action, params, callback);
    }
}