import { resolveCallbackFactory, rejectCallbackFactory } from "../utils/tool";
import {core_openWindow, core_goBack} from  'hybrid-sdk-common'

interface openWindowParams {
    pageUrl: string;
    title?: string;
    swapBack?: number;
    hideStatusBar?: number;
    hideNavBar?: number;
    screenDirection?: number;
    navBarBgColor?: string;
    staBarStyle?: number;
    showShareBtn?: number;
    allLight?: number;
    businessData?: any;
    [propName: string]: any;
}

export function openWindow(params: any){
    let _params: openWindowParams = {
        // ...defaultParams,
        pageUrl: params.url,
        hideNavBar: params.hideNav
    };

    if(params.businessData) _params.businessData = params.businessData;

    core_openWindow(_params);
}


export function openLiveWindow(params: any){

    let _params: openWindowParams = {
        // ...defaultParams,
        pageUrl: params.url,
        hideNavBar: params.hideNav,
        hideStatusBar: params.hideStatus,
        screenDirection: params.isLandscape ? 2 : params.landscapeType,
        swapBack: params.sweepBack
    };

    if(params.businessData) _params.businessData = params.businessData;

    core_openWindow(_params);
}

export function openOrderWindow(params: any, callback?: Function){

    let _params: openWindowParams = {
        // ...defaultParams,
        pageUrl: params.url
    };

    if(params.businessData) _params.businessData = params.businessData;

    let success= resolveCallbackFactory(callback);
    let fail= rejectCallbackFactory(callback);
    return core_openWindow(_params).then(success, fail);
}

/**
 * 页面的退出方式
 * @export
 * @param {number} backWindow 退出方式 0 fe页面一级级返回;   1  native 结束
 */
export function goBack (params: any) {
    let backWindow = params ? (params.exit ? 1 : 0) : 0;
    let _params: any = {backWindow: backWindow};

    core_goBack(_params);
}