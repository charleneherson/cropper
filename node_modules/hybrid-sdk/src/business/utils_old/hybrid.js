/**
 * Copyright (c) 2014-2017 Zuoyebang, All rights reserved.
 * @fileoverview 作业帮 app hybrid api.
 * @author WangWenshu | wangwenshu@zuoyebang.com
 * @author HouQuan | houquan@zuoyebang.com
 * @author WangYan | wangyan01@zuoyebang.com
 * @version 1.0 | 2015-09-19 | WangWenshu    // 初始版本。
 * @version 2.0 | 2016-04-20 | HouQuan       // 迁移 question 模块中的 hybrid.
 * @version 2.1 | 2016-04-28 | HouQuan       // 去掉 hybrid 的 exec 接口。
 * @version 2.2 | 2016-07-05 | HouQuan       // 修正第二个参数为回调函数时的情况。
 * @version 2.3 | 2016-12-09 | WangYan       // 删除 bridge 复用策略，解决页面多 widget 情境下，action 请求被覆盖的问题。
 * @version 2.4 | 2017-02-14 | WangYan       // 增加 hybrid 在浏览器环境下的响应。
 * @version 2.5 | 2017-02-15 | WangYan       // 增加 hybrid 在浏览器环境下的自定义请求前缀”/hybridaction/“，以防与其他请求路径冲突。
 * @version 2.6 | 2017-05-11 | WangYan       // 删除 test 环境下的浏览器环境适应能力，避免对test环境的影响。
 * @version 2.6 | 2017-06-05 | WangYan       // 修正 hybrid 只有在本地环境（localhost）下才改变协议。
 * @version 2.6 | 2018-10-03 | liujianwei    // 修正 hybrid export 内容错误。
 *
 * @method hybrid(action, args, callback)    // 方法：App hybrid 调用.
 *   @param action {String}                  // 参数：Hybrid 调用的 action 名(可选，默认为空，不执行任何操作)。
 *   @param args {Object}                    // 参数：调用的参数(可选，默认为空)。
 *   @param callback {Function}              // 参数：回调(可选，默认无)。
 *   @return No                              // 返回：无。
 *
 * @description    // 附加说明。
 *   1) 本方法用于在 mobile 端 web 页面与作业帮 app 交互通信。
 *   2) 新增可以在浏览器环境下响应（配置server.conf的rewrite项即可）,
 *      eg: rewrite ^\/hybridaction/common  test/question/page/action/common.json
 *
 * @example    // 典型的调用示例。
    var hybrid = require('common:widget/util/hy
  import hybrid from '../utils/hybrid.js';
    // 调起示例。
    hybrid('actionName', {
      arg1: '',
      arg2: ''
    }, function(){
      // app 回调。
    };

    // is_login: 判断用户是否登录。
    hybrid('is_login', function(res){});    // res: {isLogin: boolean}

    // login: 跳转登录页面。
    hybrid('login');

    // openWindow: 打开一个指定的web页面。
    hybrid('openWindow', {
      url: string    // 指定页面的完整url，示例：http://www.zybang.com/zuoyebang/fudao/index.html
    });
 */

import Type from './type.js'
import tools from './tools.js'
import { NOT_FOUND } from './statusCode.js'
import { isInApp, production, UNKNOW } from './system.js'
// import { addLog } from '../../utils/tool'

var isLocal = /(localhost|127.0.0.1)/.test(location.origin)
var __cb__ = null

// 创建hybrid
function createHybrid () {
  var protocol = !isLocal ? 'iknowhybrid://' : '/hybridaction/'
  var callbackCount = 0

  function createBridge () {
    var bridge = document.createElement('iframe')
    bridge.setAttribute('style', 'display:none;')
    bridge.setAttribute('height', '0px')
    bridge.setAttribute('width', '0px')
    bridge.setAttribute('frameborder', '0')
    document.documentElement.appendChild(bridge)
    return bridge
  }

  function buildUrl (action, params, callback) {
    var url = protocol + action + '?'
    var id = tools.guid()
    url += 'data=' + encodeURIComponent(JSON.stringify(params || {}))
    if (callback) {
      var callbackName = '__cb__' + id + '__' + callbackCount++
      isLocal && (__cb__ = callbackName)
      window[callbackName] = function () {
        var args = arguments
        args = [].slice.call(args)
        // 回调名称
        args.push(callbackName)
        callback && callback.apply(window, args)
        /**
         * Des:删除回调
         * 1.如果没有remove方法，直接删除
         * 2.如果有remove方法，调用remove方法删除。自定义删除时机
         */
        if (Type.isFunction(callback.remove)) {
          !!callbackName && callback.remove.apply(callback, [callbackName])
        } else {
          delete window[callbackName]
        }
      }
      url += '&__callback__=' + callbackName
    }
    return url
  }

  return function (action, params, callback) {
    // addLog(`oldJsBridge, action=${action}`);
    var bridge = createBridge()
    if (params && Object.prototype.toString.call(params) === '[object Function]') {
      callback = params
      params = {}
    }
    var url = buildUrl(action, params, callback)

    isLocal && (bridge.onload = window[__cb__])
    __cb__ = null

    bridge.setAttribute('src', url);
    (function (bridge) {
      // 3000ms后删除创建的iframe,//时间随机给的
      bridge.timer = setTimeout(() => {
        bridge.parentNode.removeChild(bridge)
        clearTimeout(bridge.timer)
      }, 3000)
    })(bridge)
  }
}

/**
 * 调用app的hybrid方法
 */
function _h5PluginAction (action, params, callback) {
  if (params && Object.prototype.toString.call(params) === '[object Function]') {
    callback = params
    params = {}
  }
  params = params || {}
  params.windowFlag = window
  params.url = window.location.href
  window.parent.h5PluginAction(action, params, callback)
}
export var hybrid = isInApp
  ? createHybrid()
  : production === UNKNOW
    ? ''
    : _h5PluginAction

if (isLocal) {
  console.log('本地环境，createHybrid')
  hybrid = createHybrid()
}

/**
 * 创建hybrid 回调方法，为了兼容以前的接口，和win端的h5PluginAction,不能修改createHybrid
 * @param {Function} success  成功调用action
 * @param {Function} notFound 没有找到action
 */
export function createHybridCallback (success, notFound) {
  var callback = null
  if (Type.isFunction(success) || Type.isFunction(notFound)) {
    callback = function (response) {
      if (!!response && response.code === NOT_FOUND) {
        Type.isFunction(notFound) && notFound.call(window, response)
      } else {
        Type.isFunction(success) && success.call(window, response)
      }
    }
  }
  return callback
}
