import Event from '../../utils/event'
import { isInApp, checkSystem } from '../../utils/system'
import Type from '../../utils/type'
import { keySet, customKeySet } from './actionType'
const win: any = window;
/**
 * 注册NATIVE_CALLBACK回调触发接口
 */

win._NATIVE_CALLBACK = function (res:any) {
  console.log(res)
  if (res && res.action_type) {
    var type = res.action_type
    var data = res.data ? res.data : ''
    if (type === keySet.APP_WILL_BECOME_ACTIVE) {
      /**
       * 1.IOS进入
       * 2.Android不会触发
       * 
       * ！！！iOS 去掉了，为了保持跟端的统一 梁鹏飞的记录
       *  */
      if (checkSystem.isIPhone() || checkSystem.isIPad()) {
        Event.trigger(customKeySet.PAGE_ENTER, data)
      }
    } else if (type === keySet.APP_DID_BECOME_ACTIVE) {
      /**
       * 1.Android进入
       * 2.IOS进入HOME键方式进入
       * 
       * 3. iOS Android 都是一样的，没有了上面两条的区别，梁鹏飞的记录
       */
      Event.trigger(customKeySet.PAGE_ENTER, data)
    } else if (type === keySet.APP_ON_PAUSE) {
      /**
       * 1.Android页面离开，或者被遮挡，ＨＯＭＥ键
       * 2.IOS 页面离开，或者被遮挡
       **/
      Event.trigger(customKeySet.PAGE_LEAVE, data)
    } else if (type === keySet.APP_WILL_RESIGN_ACTIVE) {
      /**
       * 1.Android不让去触发
       * 2.IOS HOME键进入
       *  */
      if (checkSystem.isIPhone() || checkSystem.isIPad()) {
        Event.trigger(customKeySet.PAGE_LEAVE, data)
      }
    } else if (type === keySet.APP_PAGE_DISTORY) {
      // 页面销毁
      Event.trigger(customKeySet.PAGE_DESTORY, data)
    } else {
      Event.trigger(type, data)
    }
  } else {
    console.error('action_type is undefined')
  }
}

// 如果全局已有native callback,就不再设置，防止引入多个sdk相互覆盖
if(!win.NATIVE_CALLBACK) win.NATIVE_CALLBACK = win._NATIVE_CALLBACK;

/**
 * 注册监听键盘谈起回调
 * @param {Function} fn
 */
export function listenVisitKeyboard (fn: Function) {
  Event.listen(keySet.VIEW_LAYOUT, fn)
  Event.listen(keySet.VISIT_KEYBOARD, fn)
  return {
    remove: function () {
      Event.remove(keySet.VIEW_LAYOUT, fn)
      Event.remove(keySet.VISIT_KEYBOARD, fn)
    }
  }
}

/**
 * 注册监听端上通知FE关闭回调
 * @param {*} fn
 */
export function listenNativeExit (fn: Function) {
  Event.listen(keySet.NATIVE_EXIT, fn)
  return {
    remove: function () {
      Event.remove(keySet.NATIVE_EXIT, fn)
    }
  }
}

/**
 * 注册监听端上更新js 页面
 * @param {Function} fn
 */
export function listenUpdateData (fn: Function) {
  Event.listen(keySet.UPDATE_DATA, fn)
  return {
    remove: function () {
      Event.remove(keySet.UPDATE_DATA, fn)
    }
  }
}

/**
 * 注册监听音量监控  win
 * @param {Function} fn
 */
export function listenVolumnMonitoring (fn: Function) {
  Event.listen(keySet.VOLUMN_MONITORING, fn)
  return {
    remove: function () {
      Event.remove(keySet.VOLUMN_MONITORING, fn)
    }
  }
}

/**
 * 注册监听获取波动时间 win
 * @param {Function} fn
 */
export function listenGetWavetime (fn: Function) {
  Event.listen(keySet.GET_WAVETIME, fn)
  return {
    remove: function () {
      Event.remove(keySet.GET_WAVETIME, fn)
    }
  }
}

/**
 * 注册监听返回结果回调
 * @param {Function} fn
 */
export function listenResultCallback (fn: Function) {
  Event.listen(keySet.RESULT_CALLBACK, fn)
  return {
    remove: function () {
      Event.remove(keySet.RESULT_CALLBACK, fn)
    }
  }
}

/**
 * 注册监听页面进入
 * @param {Function} fn
 */
export function listenPageEnter (fn: Function) {
  Event.listen(customKeySet.PAGE_ENTER, fn)
  return {
    remove: function () {
      Event.remove(customKeySet.PAGE_ENTER, fn)
    }
  }
}

/**
 * 页面彻底离开进入后台
 * @param {Function} fn
 */
export function listenPageLeave (fn: Function) {
  Event.listen(customKeySet.PAGE_LEAVE, fn)
  return {
    remove: function () {
      Event.remove(customKeySet.PAGE_LEAVE, fn)
    }
  }
}

/**
 * 注册监听页面销毁之前
 * @param {Function} fn
 */
export function listenPageDestory (fn: Function) {
  Event.listen(customKeySet.PAGE_DESTORY, fn)
  return {
    remove: function () {
      Event.remove(customKeySet.PAGE_DESTORY, fn)
    }
  }
}

/**
 *  注册监听听口回答问题的反馈
 * @param {Function} fn
 */
export function listenLiveCourseAnswerResult (fn: Function) {
  Event.listen(keySet.LIVE_COURSE_ANSWER_RESULT, fn)
  return {
    remove: function () {
      Event.remove(keySet.LIVE_COURSE_ANSWER_RESULT, fn)
    }
  }
}

/**
 * 注册监听打开新的页面后，通知数据更新
 * @param {Function} fn
 */
export function listenUpdateRefresh (fn: Function) {
  Event.listen(keySet.UPDATE_REFRESH, fn)
  return {
    remove: function () {
      Event.remove(keySet.UPDATE_REFRESH, fn)
    }
  }
}

// 监听方法
var cache: {[propName: string]: any} = {}
export function on (event: string, fn: Function, isNaviCallback: boolean) {
  if (!event || !Type.isFunction(fn)) {
    return
  }
  // listen
  Event.listen(event, fn)
  // 非NAVICALLBACK模式
  if (!isNaviCallback) {
    if (isInApp) {
      win[event] = function (data: any) {
        Event.trigger(event, data)
      }
    } else {
      if (typeof win.ZCefClient !== 'undefined') {
        var callback = (data: any) => {
          Event.trigger(event, data)
        }

        // 存储注册的监听callback方法,用于后续的移除操作
        if (!cache[event]) {
          cache[event] = []
        }
        cache[event].push(callback)
        // 注册cef的监听
        win.ZCefClient.addEventListener(event, callback)
      }
    }
  }
}

// 移除监听监听事件
export function off (event: string, fn: Function, isNaviCallback: boolean) {
  if (!event || !Type.isFunction(fn)) {
    return
  }
  Event.remove(event, fn)
  // 非NAVICALLBACK模式
  if (!isNaviCallback) {
    if (isInApp) {
      win[event] && delete win[event]
    } else {
      if (typeof win.ZCefClient !== 'undefined') {
        var callbackList = cache[event] || []
        for (let i = 0, len = callbackList.length; i < len; i++) {
          var callback = callbackList[i]
          if (callback === fn) {
            win.ZCefClient.removeEventListener(event, callback)
          }
        }
      }
    }
  }
}
