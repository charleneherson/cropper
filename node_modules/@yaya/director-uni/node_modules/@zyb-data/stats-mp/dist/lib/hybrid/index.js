import { __assign, __awaiter, __generator } from "tslib";
// 暂时先这么引入，rollup不好配置
var hybridSdk = require('hybrid-sdk');
import StatsMain from '../core';
import { DataType } from '@zyb-data/stats-core';
import { D } from '../core/debug';
import { StatePageHybrid } from './page';
import { StatsPlatformHybrid } from './platform';
var sdkVersion = '0.0.1';
var sdkType = 'hybrid';
/**
 * hybrid 的 dataPool 与其它的不同，
 * 是由 native 管理的，所以需要单独实现
 */
var DataPoolManager = /** @class */ (function () {
    function DataPoolManager() {
    }
    /**
     * 向native的数据池中设置数据
     */
    DataPoolManager.prototype.setDataPool = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve) {
                            D.log('向APP发送点位数据', data);
                            hybridSdk.postMessageHybrid('zybTrackerData', data, function () {
                                resolve();
                            });
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return DataPoolManager;
}());
export { DataPoolManager };
var ZybStats = /** @class */ (function () {
    function ZybStats() {
        this.cfg = {};
        this.$dm = new DataPoolManager();
        this.sm = new StatsMain({ platform: new StatsPlatformHybrid() }, this.cfg);
        this.$page = new StatePageHybrid(this.$dm, this.sm);
    }
    /**
     * 更新配置
     * @param config
     */
    ZybStats.prototype.config = function (config) {
        this.cfg = __assign(__assign({}, this.cfg), config);
        this.sm.$config.set(config);
    };
    /**
     * sdk 初始化
     */
    ZybStats.prototype.init = function () {
        var _this = this;
        D.log('全埋点SDK初始化');
        var zpID = this.sm.$config.get().zpID;
        if (!zpID) {
            D.error('全埋点初始化失败，未设置zpID');
            return;
        }
        hybridSdk.getCommonParameters(function (res) {
            _this.sm.$config.set({
                zpID: zpID + '-' + (res.os === 'ios' ? 'I' : 'A')
            });
            console.log(res.os);
            console.log(_this.sm.$config.get().zpID);
            _this.sm.init();
            _this.$page.init();
        });
    };
    /**
     * 更新全局参数
     * @param {String} params 全局参数（增量覆盖）
     */
    ZybStats.prototype.global = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$dm.setDataPool({
                            type: DataType.Global,
                            value: params
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 手动打点方法
     * @param {String} params 打点参数
     */
    ZybStats.prototype.track = function (name, params) {
        if (params === void 0) { params = {}; }
        return new Promise(function (resolve) {
            var data = __assign({}, params);
            var actionType = params.act || 'view';
            delete data.act;
            hybridSdk.postMessageHybrid('zybTrackerStatisticsAction', {
                event: name,
                actionType: actionType,
                params: data
            }, function () {
                resolve();
            });
        });
    };
    return ZybStats;
}());
export var zs = new ZybStats();
export default zs;
//# sourceMappingURL=index.js.map