import { __assign } from "tslib";
import SparkMD5 from 'spark-md5';
import { D } from '../core/debug';
import { parse } from 'url';
var originRequest = wx.request;
var StatsPlatformMp = /** @class */ (function () {
    function StatsPlatformMp() {
        this.storePrefix = '__zs_';
        this.cuidStoreKey = 'cuid';
    }
    StatsPlatformMp.prototype.parseURL = function (url) {
        return parse(url);
    };
    StatsPlatformMp.prototype.getCUID = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.getStore('openid')) {
                resolve(_this.getStore('openid'));
                return;
            }
            if (_this.getStore(_this.cuidStoreKey)) {
                resolve(_this.getStore(_this.cuidStoreKey));
                return;
            }
            if (_this.systemInfo) {
                resolve(_this.cuid());
            }
            else {
                _this.getSystemInfo().then(function (info) {
                    resolve(_this.cuid());
                }, function () {
                    resolve(_this.cuid());
                });
            }
        });
    };
    StatsPlatformMp.prototype.cuid = function () {
        var factors = ['wechat', 'miniProgram', 'data-stats', '750', '1240'];
        if (this.systemInfo) {
            factors[3] = this.systemInfo.screenWidth;
            factors[4] = this.systemInfo.screenHeight;
        }
        factors = factors.concat([+new Date(), Math.random()]);
        var cuid = SparkMD5.hashBinary(factors.join('-')).substr(0, 32);
        this.setStore(this.cuidStoreKey, cuid);
        return cuid;
    };
    StatsPlatformMp.prototype.getNetworkInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var $this = _this;
            wx.getNetworkType({
                success: function (res) {
                    D.log('getNetworkInfo', res);
                    $this.networkInfo = res;
                    resolve(res);
                }
            });
        });
    };
    StatsPlatformMp.prototype.getSystemInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var $this = _this;
            wx.getSystemInfo({
                success: function (res) {
                    $this.systemInfo = res;
                    resolve(res);
                }
            });
        });
    };
    StatsPlatformMp.prototype.request = function (option) {
        return new Promise(function (resolve, reject) {
            option.success = function (res) {
                resolve(res);
            };
            option.fail = function (err) {
                reject(err);
            };
            originRequest(option);
        });
    };
    StatsPlatformMp.prototype.sendLog = function (option) {
        return new Promise(function (resolve, reject) {
            option.success = function (res) {
                resolve(res);
            };
            option.fail = function (err) {
                reject(err);
            };
            originRequest(option);
        });
    };
    StatsPlatformMp.prototype.setStore = function (key, value) {
        return wx.setStorageSync("" + this.storePrefix + key, value);
    };
    StatsPlatformMp.prototype.getStore = function (key) {
        return wx.getStorageSync("" + this.storePrefix + key);
    };
    StatsPlatformMp.prototype.getHitTargets = function (x, y, elements, ctx, target) {
        var _this = this;
        elements = elements.map(function (v) { return "#" + v; });
        return new Promise(function (resolve) {
            var targets = [];
            // 先判断target是否有id，如果有id就不做后续处理了
            if (target.id && elements.indexOf("#" + target.id) > -1) {
                resolve([target]);
                return;
            }
            Promise.all([
                _this.getViewportInfo(),
                Promise.all(elements.map(function (element, idx) {
                    return _this.getBoundingClientRect(element, ctx, true);
                }))
            ]).then(function (resp) {
                var viewport = resp[0];
                var scrollOffset = viewport.scrollOffset;
                var scrollTop = scrollOffset.scrollTop;
                var rectsArr = resp[1];
                rectsArr.forEach(function (rects) {
                    rects.forEach(function (rect) {
                        if (_this.isPointInTarget(x, y, rect, scrollTop)) {
                            targets.push(rect);
                        }
                    });
                });
                resolve(targets);
            });
        });
    };
    StatsPlatformMp.prototype.getVisibleTargets = function (elements) {
        var _this = this;
        elements = elements.map(function (v) { return "#" + v; });
        elements = elements.concat(elements.map(function (v) { return ".zyb-stats >>> " + v; }));
        return new Promise(function (resolve) {
            var targets = [];
            var unhit = [];
            _this.getViewportInfo().then(function (viewport) {
                var viewportRect = viewport.rect;
                Promise.all(elements.map(function (element, idx) {
                    return _this.getBoundingClientRect(element);
                })).then(function (rectsArr) {
                    rectsArr.forEach(function (rects) {
                        rects.forEach(function (rect) {
                            if (_this.isTargetInViewport(rect, viewportRect)) {
                                targets.push(rect);
                            }
                            else {
                                unhit.push(rect);
                            }
                        });
                    });
                    resolve({ hit: targets, unhit: unhit, list: rectsArr });
                }, function () {
                    // todo
                });
            }, function () {
                // todo
            });
        });
    };
    StatsPlatformMp.prototype.getBoundingClientRect = function (element, ctx, log) {
        return new Promise(function (reslove) {
            var query = wx.createSelectorQuery();
            if (ctx) {
                query = query.in(ctx);
            }
            query.selectAll(element).boundingClientRect();
            query.exec(function (res) {
                reslove(res[0].map(function (v, i) {
                    return __assign(__assign({}, v), { zsQueryIndex: i });
                }));
            });
        });
    };
    StatsPlatformMp.prototype.getViewportInfo = function () {
        return new Promise(function (reslove) {
            var query = wx.createSelectorQuery();
            query.selectViewport().boundingClientRect();
            query.selectViewport().scrollOffset();
            query.exec(function (res) {
                reslove({ rect: res[0], scrollOffset: res[1] });
            });
        });
    };
    StatsPlatformMp.prototype.isPointInTarget = function (x, y, rect, scrollTop) {
        if (!rect)
            return false;
        var left = rect.left, right = rect.right, top = rect.top, height = rect.height;
        if (left < x && x < right && scrollTop + top < y && y < scrollTop + top + height) {
            return true;
        }
        return false;
    };
    StatsPlatformMp.prototype.isTargetInViewport = function (rect, viewportRect) {
        if (!rect || !viewportRect)
            return false;
        var left = rect.left, top = rect.top, right = rect.right, bottom = rect.bottom, width = rect.width, height = rect.height;
        var vh = viewportRect.height;
        var vw = viewportRect.width;
        // console.log(vh, vw, left, top, right, bottom, width, height)
        // 任意像素展现即认为展现
        // todo 判断条件不够严谨
        // 1. 不判断元素本身的宽高是否为零，因为存在父容器无宽高的情况 
        if (((left >= 0 && left < vw) || (left < 0 && left + width > 0)) &&
            ((top >= 0 && top < vh) || (top < 0 && top + height > 0))) {
            return true;
        }
        return false;
    };
    return StatsPlatformMp;
}());
export { StatsPlatformMp };
//# sourceMappingURL=platform.js.map