import { __assign } from "tslib";
import { DeviceType, NetworkStatusType, DataType, ActType } from '@zyb-data/stats-core';
import { D } from './debug';
/**
 * 全局数据默认值
 */
var defaultGlobalData = {
    paid: '-1',
    un: '',
    i: '',
    fr: DeviceType.others,
    mc: '',
    sv: '',
    s: '',
    l: NetworkStatusType.Others,
    channel: '',
    av: '',
    op: '',
    sdkVersion: '',
    ip: '',
    plat: '',
    pageUUID: '',
    act: ActType.default
};
/**
 * 数据池管理器
 */
var StatsDataPoolManager = /** @class */ (function () {
    /**
     *
     * @param $config 配置服务
     */
    function StatsDataPoolManager($config) {
        this.$config = $config;
        this.dataPool = {
            gl: __assign({}, defaultGlobalData),
            dp: []
        };
    }
    /**
     * 插入新页面数据
     * @param pid 页面id
     */
    StatsDataPoolManager.prototype.appendDataPage = function (pid) {
        if (pid === void 0) { pid = ''; }
        var dp = this.createDataPage(pid);
        this.$dp.push(dp);
        return dp;
    };
    /**
     * 创建页面数据
     * @param pid 页面id
     */
    StatsDataPoolManager.prototype.createDataPage = function (pid) {
        if (pid === void 0) { pid = ''; }
        var dataPage = {
            pid: pid,
            st: +new Date(),
            et: 0,
            events: new Map(),
            networks: new Map(),
            contexts: {}
        };
        return dataPage;
    };
    /**
     * 获取页面数据
     * @param lb lookback 回溯层级 @default 0
     */
    StatsDataPoolManager.prototype.getDataPage = function (lb) {
        if (lb === void 0) { lb = 0; }
        return this.dataPool.dp[this.dataPool.dp.length - 1 - lb];
    };
    /**
     * 获取当前页面数据
     */
    StatsDataPoolManager.prototype.getCurrentDataPage = function () {
        return this.getDataPage();
    };
    /**
     * 设置数据
     * @param dataType 数据类型
     * @param value 数据值
     * @param cp 当前页面上下文数据
     */
    StatsDataPoolManager.prototype.setData = function (dataType, value, cp) {
        var _a, _b, _c, _d, _e;
        switch (dataType) {
            case DataType.Global:
                this.$global = __assign(__assign({}, this.$global), value);
                break;
            case DataType.Context:
                cp.contexts = __assign(__assign({}, cp.contexts), value);
                break;
            case DataType.Event:
                var _f = value, ty = _f.ty, id = _f.id;
                if (!cp.events.get(ty)) {
                    cp.events.set(ty, new Map());
                }
                if (!((_a = cp.events.get(ty)) === null || _a === void 0 ? void 0 : _a.get(id))) {
                    (_b = cp.events.get(ty)) === null || _b === void 0 ? void 0 : _b.set(id, []);
                }
                (_d = (_c = cp.events
                    .get(ty)) === null || _c === void 0 ? void 0 : _c.get(id)) === null || _d === void 0 ? void 0 : _d.push(value);
                break;
            case DataType.Network:
                var uri = value.uri;
                if (!cp.networks.get(uri)) {
                    cp.networks.set(uri, []);
                }
                (_e = cp.networks.get(uri)) === null || _e === void 0 ? void 0 : _e.push(value);
                break;
            default:
                D.error('Invalid DataType.');
        }
        return value;
    };
    /**
     * 获取数据
     * @param dd 数据描述
     * @param cp 当前页面上下文数据
     */
    StatsDataPoolManager.prototype.getData = function (dd, cp) {
        var ty = dd.ty, _a = dd.lb, lb = _a === void 0 ? 0 : _a, et = dd.et, eid = dd.eid, _b = dd.u, u = _b === void 0 ? '' : _b, _c = dd.ks, ks = _c === void 0 ? [] : _c;
        cp = cp || this.getDataPage(lb);
        switch (ty) {
            case DataType.Global:
                return this.access(this.$global, ks);
            case DataType.Context:
                return this.access(cp.contexts, ks);
            case DataType.Event:
                return this.access(this.searchEvent(cp, et, eid), ks);
            case DataType.Network:
                return this.access(this.searchNetwork(cp, u), ks);
            default:
                return undefined;
        }
    };
    StatsDataPoolManager.prototype.getPool = function () {
        return this.dataPool;
    };
    Object.defineProperty(StatsDataPoolManager.prototype, "$dp", {
        get: function () {
            return this.dataPool.dp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsDataPoolManager.prototype, "$global", {
        get: function () {
            return this.dataPool.gl;
        },
        set: function (gl) {
            this.dataPool.gl = __assign(__assign({}, this.dataPool.gl), gl);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置全局数据
     * @param data kv
     */
    StatsDataPoolManager.prototype.setGlobal = function (data) {
        this.dataPool.gl = __assign(__assign({}, this.dataPool.gl), data);
    };
    Object.defineProperty(StatsDataPoolManager.prototype, "$common", {
        get: function () {
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsDataPoolManager.prototype, "$currentPage", {
        get: function () {
            return this.getCurrentDataPage();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 对obj进行任意层级的安全取值方法
     *
     * @param obj 目标对象
     * @param ks keys
     */
    StatsDataPoolManager.prototype.access = function (obj, ks) {
        if (ks === void 0) { ks = []; }
        var defaultValue = '';
        if (!obj) {
            return defaultValue;
        }
        var iter = obj;
        for (var i = 0; i < ks.length; i++) {
            var _a = ks[i], t = _a.t, v = _a.v;
            // todo 区分object和数组
            iter = iter[v];
            if (iter === undefined) {
                break;
            }
        }
        return iter === undefined ? defaultValue : iter;
    };
    // 暂时没用到
    StatsDataPoolManager.prototype.searchEvents = function (cp, ty, eid) {
        var _a;
        if (eid) {
            var results = (_a = cp.events.get(ty)) === null || _a === void 0 ? void 0 : _a.get(eid);
            return results || [];
        }
        // todo 模糊搜索支持
        return [];
    };
    StatsDataPoolManager.prototype.searchEvent = function (cp, ty, eid) {
        var list = this.searchEvents(cp, ty, eid);
        return list[list.length - 1];
    };
    StatsDataPoolManager.prototype.searchNetworks = function (cp, u) {
        var results = cp.networks.get(u);
        return results || [];
    };
    StatsDataPoolManager.prototype.searchNetwork = function (cp, u) {
        var list = this.searchNetworks(cp, u);
        return list[list.length - 1];
    };
    return StatsDataPoolManager;
}());
export { StatsDataPoolManager };
//# sourceMappingURL=data-pool.js.map