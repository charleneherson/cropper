import { parse } from 'url';
var axios = require('axios');
var StatsPlatformHybrid = /** @class */ (function () {
    function StatsPlatformHybrid() {
        this.storePrefix = '__zs_';
        this.cuidStoreKey = 'cuid';
    }
    StatsPlatformHybrid.prototype.parseURL = function (url) {
        return parse(url);
    };
    StatsPlatformHybrid.prototype.getCUID = function () {
        return new Promise(function (resolve, reject) {
            resolve('');
        });
    };
    StatsPlatformHybrid.prototype.getNetworkInfo = function () {
        return new Promise(function (resolve, reject) {
            resolve({});
        });
    };
    StatsPlatformHybrid.prototype.getSystemInfo = function () {
        return new Promise(function (resolve, reject) {
            resolve({});
        });
    };
    StatsPlatformHybrid.prototype.request = function (option) {
        return axios(option);
    };
    // hybrid不需要sendLog
    StatsPlatformHybrid.prototype.sendLog = function () {
        return Promise.resolve('');
    };
    StatsPlatformHybrid.prototype.setStore = function (key, value) {
        return localStorage.setItem("" + this.storePrefix + key, value);
    };
    StatsPlatformHybrid.prototype.getStore = function (key) {
        return localStorage.getItem("" + this.storePrefix + key);
    };
    StatsPlatformHybrid.prototype.getHitTargets = function (x, y, ids, target) {
        var _this = this;
        return new Promise(function (resolve) {
            if (!ids || !ids.length) {
                return resolve(null);
            }
            var parent = target.closest(ids.map(function (id) { return "." + id; }).join(','));
            resolve(parent ? {
                id: _this.getEventId(parent, ids),
                dataset: parent.dataset
            } : null);
        });
    };
    StatsPlatformHybrid.prototype.getVisibleTargets = function (ids) {
        var _this = this;
        return new Promise(function (resolve) {
            var targets = [];
            var unhit = [];
            // todo: 考虑优化这个逻辑，多次querySelectorAll有点不合埋，但是需要想办法拿到zsQueryIndex
            ids.forEach(function (id) {
                var elements = document.querySelectorAll("." + id);
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    var rect = element.getBoundingClientRect();
                    var data = {
                        id: id,
                        // @ts-ignore
                        dataset: element.dataset,
                        zsQueryIndex: i
                    };
                    if (_this.isTargetInViewport(rect)) {
                        targets.push(data);
                    }
                    else {
                        unhit.push(data);
                    }
                }
            });
            resolve({ hit: targets, unhit: unhit, list: [] });
        });
    };
    StatsPlatformHybrid.prototype.isTargetInViewport = function (rect) {
        if (!rect)
            return false;
        var left = rect.left, top = rect.top, right = rect.right, bottom = rect.bottom, width = rect.width, height = rect.height;
        var vw = window.innerWidth;
        var vh = window.innerHeight;
        if (((left >= 0 && left < vw) || (left < 0 && left + width > 0)) &&
            ((top >= 0 && top < vh) || (top < 0 && top + height > 0)) &&
            width > 0 && height > 0) {
            return true;
        }
        return false;
    };
    StatsPlatformHybrid.prototype.getEventId = function (element, list) {
        var classes = Array.from(element.classList) || element.className.split(' ');
        var ids = new Set(list);
        var result = classes.filter(function (cls) {
            return ids.has(cls);
        });
        return result[0] || '';
    };
    return StatsPlatformHybrid;
}());
export { StatsPlatformHybrid };
//# sourceMappingURL=platform.js.map