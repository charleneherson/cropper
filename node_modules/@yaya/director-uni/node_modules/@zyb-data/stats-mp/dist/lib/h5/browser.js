/**
 * Copyright (c) 2014-2017 Zuoyebang, All rights reserved.
 * @fileoverview 浏览器类型判断
 * @author WangWenshu | wangwenshu@zuoyebang.com
 * @author WangYan01   | wangyan01@zuoyebang.com
 * @version 1.0 | 2014-07-03 | WangWenshu    // 初始版本，引自 tangram.
 * @version 1.1 | 2014-07-15 | WangWenshu    // 添加对 IE 11 的支持。
 * @version 1.2 | 2014-09-04 | WangWenshu    // 完善注释。
 * @version 1.3 | 2014-10-14 | WangWenshu    // 修改接口的“属性”方式为“函数”的方式，避免不必要逻辑的执行。
 * @version 1.4 | 2015-12-14 | WangWenshu    // 添加对 Edge 的支持。
 * @version 1.5 | 2016-04-08 | WangWenshu    // 新增 os()、kernel() 方法；
 * @version 1.6 | 2017-12-08 | WangYan01      // 统一 os() 输出格式 ostype os_xx。
 *                                           // 修正某些版本 Firefox 被检测为 IE 的问题。
 *
 * @method chrome()                // 方法：检测浏览器是否为 Chrome.
 *   @param No                     // 参数：无。
 *   @return {Number|undefined}    // 返回：Chrome 版本号(非 Chrome 浏览器返回 undefined)。
 *
 * @method firefox()               // 方法：检测浏览器是否为 Firefox.
 *   @param No                     // 参数：无。
 *   @return {Number|undefined}    // 返回：Firefox 版本号(非 Firefox 浏览器返回 undefined)。
 *
 * @method ie()                    // 方法：检测浏览器是否为 IE.
 *   @param No                     // 参数：无。
 *   @return {Number|undefined}    // 返回：IE 版本号(非 IE 浏览器返回 undefined)。
 *
 * @method safari()                // 方法：检测浏览器是否为 Safari.
 *   @param No                     // 参数：无。
 *   @return {Number|undefined}    // 返回：Safari 版本号(非 Safari 浏览器返回 undefined)。
 *
 * @method isStandard()    // 方法：检测文档是否启用“标准模式”渲染。
 *   @param No             // 参数：无。
 *   @return {Boolean}     // 返回：检测结果。
 *
 * @method isGecko()      // 方法：检测浏览器的排版引擎是否为 gecko.
 *   @param No            // 参数：无。
 *   @return {Boolean}    // 返回：检测结果。
 *
 * @method isWebkit()     // 方法：检测浏览器的排版引擎是否为 webkit.
 *   @param No            // 参数：无。
 *   @return {Boolean}    // 返回：检测结果。
 *
 * @method os()          // 方法：获取用户操作系统类型。
 *   @param No           // 参数：无。
 *   @return {String}    // 返回：描述用户操作系统类型的字符串。
 *
 * @method kernel()      // 方法：获取用户浏览器内核类型。
 *   @param No           // 参数：无。
 *   @return {String}    // 返回：描述用户浏览器内核类型的字符串。
 *
 * @description    // 附加说明。
 *   1) 本方法用于检测用户操作系统、浏览器类型及渲染模式、排版引擎等；相应的浏览器检测方法返回检测到的浏览器版本号；
 *      不匹配的浏览器类型字段值为 undefined (请参阅示例)。
 *
 * @example    // 典型的调用示例。
 * // 本示例为 Windows 10 64bit 环境 Chrome 49.0.2623.110 m (64-bit) 版本下，fe-handbook(2016-04-08)的检测结果。
 * var browser = require('common:widget/util/browser.js');
 *
 * browser.chrome();        // 49
 *  browser.firefox();       // undefined
 *  browser.ie();            // undefined
 *  browser.safari();        // undefined
 *  browser.isGecko();       // false
 *  browser.isStandard();    // true
 *  browser.isWebkit();      // true
 *  browser.os();            // windows 10_64bit
 *  browser.kernel();        // chrome_49
 */
var ua = '';
try {
    ua = navigator.userAgent;
}
catch (e) {
    ua = 'MP';
    // console.error('请不要在非浏览器环境访问navigator对象', e);
}
export default {
    chrome: function () {
        return /\b(?:Chrome|CriOS)\/(\d+)/i.test(ua) ? +RegExp.$1 : undefined;
    },
    firefox: function () {
        return /\bFirefox\/(\d+)/i.test(ua) ? +RegExp.$1 : undefined;
    },
    ie: function () {
        return /\b(?:MSIE |rv:|Edge\/)(\d+)/i.test(ua) && !this.firefox()
            ? document.documentMode || +RegExp.$1
            : undefined; // Firefox 某些版本的 ua 中含有和 IE 11 一样的 'rv:' 字段。
    },
    edge: function () {
        return /\bEdge\/(\d+)/i.test(ua) ? document.documentMode || +RegExp.$1 : undefined;
    },
    safari: function () {
        return /\bSafari\/?(\d+)?/i.test(ua) && !/chrome/i.test(ua)
            ? +(RegExp.$1 || RegExp.$2)
            : undefined;
    },
    isStandard: function () {
        return document.compatMode == 'CSS1Compat';
    },
    isGecko: function () {
        return /gecko/i.test(ua) && !/like gecko/i.test(ua);
    },
    isWebkit: function () {
        return /webkit/i.test(ua);
    },
    os: function () {
        var os = 'other';
        if (/\bMac/i.test(ua)) {
            if (/iPhone/i.test(ua)) {
                os = "os_" + (/iPhone OS (\d+(?:_\d+)?)/i.test(ua) ? RegExp.$1.replace('_', '.') : 'unknown');
            }
            else if (/iPad/i.test(ua)) {
                os = "os_" + (/iPad.*OS (\d+(?:_\d+)?)/i.test(ua) ? RegExp.$1.replace('_', '.') : 'unknown');
            }
            else {
                os = "os_" + (/Mac OS X (\d+(?:_\d+)?)/i.test(ua) ? RegExp.$1.replace('_', '.') : 'unknown');
            }
        }
        else if (/Android/i.test(ua)) {
            os = "os_" + (/Android (\d+(?:\.\d+)?)/i.test(ua) ? RegExp.$1 : 'unknown');
        }
        else if (/\bWindows/i.test(ua)) {
            os = "os_" + (/Windows NT (\d+)/i.test(ua) ? RegExp.$1 : 'unknown') + "_" + (/win64|x64|wow64/i.test(ua) ? '64' : '32') + "bit";
        }
        return os;
    },
    kernel: function () {
        var browser = 'other';
        if (this.edge()) {
            browser = "edge_" + this.edge();
        }
        else if (this.ie()) {
            browser = "ie_" + this.ie();
        }
        else if (this.chrome()) {
            browser = "chrome_" + this.chrome();
        }
        else if (this.safari()) {
            browser = "safari_" + this.safari();
        }
        else if (this.firefox()) {
            browser = "firefox_" + this.firefox();
        }
        return browser;
    }
};
// 获取系统平台(iphone/ipad/android/windows/other)
export function getSysPlat() {
    // var isiOS = !!ua.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
    var isiPhone = ua.indexOf('iPhone') > 0; // iPhone终端
    var isiPad = ua.indexOf('iPad') > 0; // iPad终端
    var isAndroid = ua.indexOf('Android') > -1 || ua.indexOf('Adr') > -1; // android终端
    var isWindows = ua.indexOf('Windows') > 0;
    if (isAndroid) {
        return 'android';
    }
    else if (isiPad) {
        return 'ipad';
    }
    else if (isiPhone) {
        return 'iphone';
    }
    else if (isWindows) {
        return 'windows';
    }
    return 'other';
}
// 浏览器状态
export function browserStatus() {
    // 各种浏览器兼容
    var hidden, state, visibilityChange;
    if (typeof document.hidden !== "undefined") {
        hidden = "hidden";
        visibilityChange = "visibilitychange";
        state = "visibilityState";
    }
    else if (typeof document.mozHidden !== "undefined") {
        hidden = "mozHidden";
        visibilityChange = "mozvisibilitychange";
        state = "mozVisibilityState";
    }
    else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
        visibilityChange = "msvisibilitychange";
        state = "msVisibilityState";
    }
    else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
        visibilityChange = "webkitvisibilitychange";
        state = "webkitVisibilityState";
    }
    return { hidden: hidden, visibilityChange: visibilityChange, state: state };
}
//# sourceMappingURL=browser.js.map