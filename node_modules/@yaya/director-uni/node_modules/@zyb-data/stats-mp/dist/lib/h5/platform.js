import SparkMD5 from 'spark-md5';
import { UAParser } from 'ua-parser-js';
import { default as browser } from './browser';
var axios = require('axios');
var StatsPlatformH5Zb = /** @class */ (function () {
    function StatsPlatformH5Zb() {
        this.storePrefix = '__zs_';
        this.cuidStoreKey = 'cuid';
    }
    /**
     * url处理
     */
    StatsPlatformH5Zb.prototype.parseURL = function (url) {
        return url;
    };
    /**
     * 获取CUID
     */
    StatsPlatformH5Zb.prototype.getCUID = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.getStore(_this.cuidStoreKey)) {
                resolve(_this.getStore(_this.cuidStoreKey));
                return;
            }
            resolve(_this.cuid());
        });
    };
    StatsPlatformH5Zb.prototype.cuid = function () {
        var factors = ['other', 'unknown', 'unknown', '750', '1240'];
        try {
            factors = [
                navigator.platform,
                navigator.appName,
                navigator.userAgent,
                window.screen.availWidth,
                window.screen.availHeight
            ];
        }
        catch (e) {
            // do nothing
        }
        factors = factors.concat([+new Date(), Math.random()]);
        var cuid = SparkMD5.hashBinary(factors.join('-')).substr(0, 32);
        this.setStore(this.cuidStoreKey, cuid);
        return cuid;
    };
    /**
     * 获取网络信息
     */
    StatsPlatformH5Zb.prototype.getNetworkInfo = function () {
        return new Promise(function (resolve, reject) {
            resolve({ networkType: '' });
        });
    };
    /**
     * 获取系统信息
     */
    StatsPlatformH5Zb.prototype.getSystemInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var parser = new UAParser();
            var ua = parser.getResult();
            _this.systemInfo = {
                ua: ua,
                system: ua.os.name + " " + ua.os.version,
                screenWidth: window.screen.availWidth,
                screenHeight: window.screen.availHeight,
                browser: browser.kernel()
            };
            resolve(_this.systemInfo);
        });
    };
    /**
     * 请求
     * @param option
     */
    StatsPlatformH5Zb.prototype.request = function (option) {
        return axios(option);
    };
    StatsPlatformH5Zb.prototype.sendLog = function (option) {
        return new Promise(function (resolve, reject) {
            var url = option.url;
            var data = option.data;
            var querys = [];
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    var value = data[key];
                    if (typeof value !== 'undefined' && value !== '') {
                        querys.push(key + "=" + encodeURIComponent(value));
                    }
                }
            }
            var i = new Image();
            i.src = url + "?" + querys.join('&');
            resolve();
        });
    };
    /**
     * 存数据
     * @param key
     * @param value
     */
    StatsPlatformH5Zb.prototype.setStore = function (key, value) {
        return localStorage.setItem("" + this.storePrefix + key, value);
    };
    /**
     * 获取数据
     * @param key
     */
    StatsPlatformH5Zb.prototype.getStore = function (key) {
        return localStorage.getItem("" + this.storePrefix + key);
    };
    /**
     * 获取命中目标
     * @param x
     * @param y
     * @param elements
     */
    StatsPlatformH5Zb.prototype.getHitTargets = function (x, y, ids, target) {
        var _this = this;
        return new Promise(function (resolve) {
            if (!ids || !ids.length) {
                return resolve(null);
            }
            var parent = target.closest(ids.map(function (id) { return "." + id; }).join(','));
            resolve(parent
                ? {
                    id: _this.getEventId(parent, ids),
                    dataset: parent.dataset
                }
                : null);
        });
    };
    /**
     * 获取显示目标
     * @param elements
     */
    StatsPlatformH5Zb.prototype.getVisibleTargets = function (ids) {
        var _this = this;
        return new Promise(function (resolve) {
            var targets = [];
            var unhit = [];
            // todo: 考虑优化这个逻辑，多次querySelectorAll有点不合埋，但是需要想办法拿到zsQueryIndex
            ids.forEach(function (id) {
                var elements = document.querySelectorAll("." + id);
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    var rect = element.getBoundingClientRect();
                    var data = {
                        id: id,
                        // @ts-ignore
                        dataset: element.dataset,
                        zsQueryIndex: i
                    };
                    if (_this.isTargetInViewport(rect)) {
                        targets.push(data);
                    }
                    else {
                        unhit.push(data);
                    }
                }
            });
            resolve({ hit: targets, unhit: unhit, list: [] });
        });
    };
    StatsPlatformH5Zb.prototype.isTargetInViewport = function (rect) {
        if (!rect)
            return false;
        var left = rect.left, top = rect.top, right = rect.right, bottom = rect.bottom, width = rect.width, height = rect.height;
        var vw = window.innerWidth;
        var vh = window.innerHeight;
        if (((left >= 0 && left < vw) || (left < 0 && left + width > 0)) &&
            ((top >= 0 && top < vh) || (top < 0 && top + height > 0)) &&
            width > 0 &&
            height > 0) {
            return true;
        }
        return false;
    };
    StatsPlatformH5Zb.prototype.getEventId = function (element, list) {
        var classes = Array.from(element.classList) || element.className.split(' ');
        var ids = new Set(list);
        var result = classes.filter(function (cls) {
            return ids.has(cls);
        });
        return result[0] || '';
    };
    return StatsPlatformH5Zb;
}());
export { StatsPlatformH5Zb };
//# sourceMappingURL=platform.js.map