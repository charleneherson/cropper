import { __assign } from "tslib";
import { StatsDataPoolManager } from './data-pool';
import { StatsComposer } from './composer';
import { StatsLogger } from './logger';
import { StatsConfigService } from './config';
import { statsReady } from './ready';
/**
 * sdk core 主类
 */
var StatsMain = /** @class */ (function () {
    function StatsMain(options, config) {
        /**
         * 配置服务
         */
        this.config = new StatsConfigService({
            debug: true,
            buildInTraking: true
        });
        if (options.platform) {
            this.platform = options.platform;
        }
        this.dataPoolManager = new StatsDataPoolManager(this.config);
        this.logger = new StatsLogger(this.platform, this.config);
        this.composer = new StatsComposer(this.platform, this.dataPoolManager, this.logger, this.config);
        this.config.set(config);
    }
    Object.defineProperty(StatsMain.prototype, "$composer", {
        /**
         * 获取处理器
         */
        get: function () {
            return this.composer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$dm", {
        /**
         * 获取数据管理器
         */
        get: function () {
            return this.dataPoolManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$platform", {
        /**
         * 获取平台实例
         */
        get: function () {
            return this.platform;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$logger", {
        /**
         * 获取日志服务
         */
        get: function () {
            return this.logger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$config", {
        /**
         * 获取全局配置
         */
        get: function () {
            return this.config;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 初始化sdk core
     * @param cb success callback
     */
    StatsMain.prototype.init = function (cb) {
        var _this = this;
        var _a, _b, _c;
        // 获取初始化sdk以来的相关数据
        // 这些数据在某些平台是同步的，某些平台可能是异步的
        // 具体看平台实例的实现
        return Promise.all([
            (_a = this.$platform) === null || _a === void 0 ? void 0 : _a.getSystemInfo(),
            (_b = this.$platform) === null || _b === void 0 ? void 0 : _b.getNetworkInfo(),
            (_c = this.$platform) === null || _c === void 0 ? void 0 : _c.getCUID()
        ])
            .then(function (_a) {
            var system = _a[0], network = _a[1], cuid = _a[2];
            var _b, _c;
            _this.$dm.setGlobal({
                mc: system === null || system === void 0 ? void 0 : system.brand,
                sv: (_b = system === null || system === void 0 ? void 0 : system.system) === null || _b === void 0 ? void 0 : _b.split(' ')[1],
                s: system.screenWidth + "*" + system.screenHeight,
                fr: (_c = system === null || system === void 0 ? void 0 : system.system) === null || _c === void 0 ? void 0 : _c.split(' ')[0],
                l: network.networkType,
                i: cuid,
                av: system.browser
            });
            // 更新规则文件
            if (_this.config.get().zpID) {
                _this.$composer.update();
            }
            // sdk已经初始化，触发ready里存的callback
            statsReady.init();
            cb && cb();
        })
            .catch(function (e) {
            console.log('zs SDK init error');
        });
    };
    /**
     * 手动打点接口
     * @param name 点位名
     * @param params 点位业务参数
     */
    StatsMain.prototype.track = function (name, params) {
        this.$logger.send(__assign(__assign(__assign(__assign({}, this.$dm.$global), this.$dm.$common), { name: name }), params));
    };
    return StatsMain;
}());
export default StatsMain;
//# sourceMappingURL=index.js.map