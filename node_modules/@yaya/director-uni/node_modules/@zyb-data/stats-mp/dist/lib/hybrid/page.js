import { __assign } from "tslib";
import { D } from '../core/debug';
import { DataType, EventDataType } from '@zyb-data/stats-core';
var loc = typeof window === 'object' ? window.location : { origin: '', pathname: '' };
var TargetVisionStatus;
(function (TargetVisionStatus) {
    TargetVisionStatus[TargetVisionStatus["Show"] = 0] = "Show";
    TargetVisionStatus[TargetVisionStatus["Hide"] = 1] = "Hide";
})(TargetVisionStatus || (TargetVisionStatus = {}));
var StatePageHybrid = /** @class */ (function () {
    function StatePageHybrid($dm, $sm) {
        this.$dm = $dm;
        this.$sm = $sm;
        this.route = loc.origin + loc.pathname;
        this.query = {};
        this.visionCheckTimerID = null;
        this.visionCheckTimeout = 250;
        this.visionCache = {};
        this.events = ['click'];
        // this.onLoad
        // this.onLeave
    }
    StatePageHybrid.prototype.init = function () {
        var _this = this;
        // 解析url
        this.parseUrl();
        // 设置Context 数据
        this.setContext();
        // 初始化视图检查
        this.visionCheck();
        this.events.forEach(function (event) {
            // 在捕获阶段触发，防止stopPropagation
            document.body.addEventListener(event, _this.eventHandler(), true);
        });
    };
    /**
     * 视图变化
     */
    StatePageHybrid.prototype.visionCheck = function () {
        var $this = this;
        var pid = this.route;
        var $sm = this.$sm;
        var check = function () {
            var _a;
            if (pid) {
                var suspects = Array.from(new Set($sm.$composer
                    .getSuspecteds(pid, EventDataType.viewShow)
                    .concat($sm.$composer.getSuspecteds(pid, EventDataType.viewHide))));
                (_a = $sm.$platform) === null || _a === void 0 ? void 0 : _a.getVisibleTargets(suspects).then(function (_a) {
                    var hit = _a.hit, unhit = _a.unhit;
                    hit.forEach(function (target) {
                        var targetInCache = $this.visionCache[target.id + "-" + target.zsQueryIndex];
                        if (targetInCache === undefined || targetInCache.status !== TargetVisionStatus.Show) {
                            var eventData = {
                                ty: EventDataType.viewShow,
                                id: target.id,
                                pid: pid,
                                t: +new Date(),
                                ext: __assign({}, target.dataset)
                            };
                            $this.$dm.setDataPool({
                                type: DataType.Event,
                                value: eventData
                            });
                            $this.visionCache[target.id + "-" + target.zsQueryIndex] = {
                                target: target,
                                status: TargetVisionStatus.Show
                            };
                        }
                    });
                    unhit.forEach(function (target) {
                        var targetInCache = $this.visionCache[target.id + "-" + target.zsQueryIndex];
                        if ((targetInCache === null || targetInCache === void 0 ? void 0 : targetInCache.status) === TargetVisionStatus.Show) {
                            // D.log('真实展现（hide）', target)
                            var eventData = {
                                ty: EventDataType.viewHide,
                                id: target.id,
                                pid: pid,
                                t: +new Date(),
                                ext: __assign({}, target.dataset)
                            };
                            $this.$dm.setDataPool({
                                type: DataType.Event,
                                value: eventData
                            });
                            $this.visionCache[target.id + "-" + target.zsQueryIndex] = {
                                target: target,
                                status: TargetVisionStatus.Hide
                            };
                        }
                    });
                });
            }
            else {
                D.log('异步的隐藏判断，上下文丢失了，用缓存上下文操作');
            }
            $this.visionCheckTimerID = setTimeout(check, $this.visionCheckTimeout);
        };
        var visionCheck = function () {
            $this.clearVisionCheckTimer();
            check();
        };
        visionCheck();
    };
    StatePageHybrid.prototype.clearVisionCheckTimer = function () {
        if (this.visionCheckTimerID !== null) {
            clearTimeout(this.visionCheckTimerID);
        }
    };
    StatePageHybrid.prototype.eventHandler = function () {
        var $this = this;
        var $sm = this.$sm;
        var eventHandler = function (event) {
            var _a;
            try {
                var pid_1 = $this.route;
                var target = event.target;
                var suspects = $sm.$composer.getSuspecteds(pid_1, EventDataType.click);
                (_a = $sm.$platform) === null || _a === void 0 ? void 0 : _a.getHitTargets(0, 0, suspects, target).then(function (tar) {
                    if (!tar) {
                        return;
                    }
                    D.log('点击检查', tar);
                    var ext = __assign({}, tar.dataset);
                    try {
                        if (ext.zsIdx !== undefined && ext.zsList !== undefined) {
                            ext.zsItem = ext.zsList[ext.zsIdx] || {};
                        }
                    }
                    catch (e) {
                        D.log(e);
                    }
                    var eventData = {
                        ty: EventDataType.click,
                        id: tar.id,
                        pid: pid_1,
                        t: +new Date(),
                        ext: ext
                    };
                    $this.$dm.setDataPool({
                        type: DataType.Event,
                        value: eventData
                    });
                });
            }
            catch (err) {
                D.error(err);
            }
        };
        return eventHandler;
    };
    StatePageHybrid.prototype.parseUrl = function () {
        var _this = this;
        var path = location.pathname;
        var matches = path.match(/([^/]+)\/([^/]+)-\w{8}-hycache.html/);
        if (location.search) {
            var params = new URLSearchParams(location.search);
            params.forEach(function (value, name) {
                _this.query[name] = value;
            });
        }
        if (!matches) {
            D.log('初始化hybrid route失败，转换为url');
            this.route = location.origin + location.pathname;
            return false;
        }
        this.route = "zyb://" + matches[1] + "/page/" + matches[2];
    };
    StatePageHybrid.prototype.setContext = function () {
        this.$dm.setDataPool({
            type: DataType.Context,
            value: __assign({}, this.query)
        });
    };
    return StatePageHybrid;
}());
export { StatePageHybrid };
//# sourceMappingURL=page.js.map