import { __assign, __extends } from "tslib";
import { DataType, EventDataType, BuiltInName } from '@zyb-data/stats-core';
import { D } from '../core/debug';
var originApp = App;
var originPage = Page;
var originComponent = Component;
var originRequest = wx.request;
var ErrCPDoNotExist = '$cp do not exist.';
var StatsAppFactoryWX = /** @class */ (function () {
    function StatsAppFactoryWX($sm) {
        this.$sm = $sm;
    }
    /**
     * override wx Functions
     */
    StatsAppFactoryWX.prototype.init = function () {
        App = this.App;
        Page = this.Page;
        Component = this.Component;
        Object.defineProperty(wx, 'request', {
            writable: true
        });
        wx.request = this.Request;
    };
    Object.defineProperty(StatsAppFactoryWX.prototype, "App", {
        get: function () {
            var _this = this;
            return function (option) {
                var appInstance = new StatsAppWX(_this.$sm, option);
                appInstance.init();
                _this.appInstance = appInstance;
                return originApp(appInstance.option);
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppFactoryWX.prototype, "Page", {
        get: function () {
            var _this = this;
            return function (option) {
                var pageInstance = new StatsPageWX(_this.$sm, _this.appInstance, option);
                pageInstance.init();
                return originPage(pageInstance.option);
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppFactoryWX.prototype, "Component", {
        get: function () {
            var _this = this;
            return function (option) {
                var componentInstance = new StatsComponentWX(_this.$sm, _this.appInstance, option);
                componentInstance.init();
                return originComponent(componentInstance.option);
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppFactoryWX.prototype, "Request", {
        get: function () {
            var _this = this;
            return function (option) {
                var _a, _b, _c, _d, _e;
                var $sm = _this.$sm;
                var modifiedOption = __assign({}, option);
                var urlInfo = (_a = _this.$sm.$platform) === null || _a === void 0 ? void 0 : _a.parseURL(modifiedOption.url);
                var pathname = urlInfo.pathname;
                var $cp = (_c = (_b = _this.appInstance) === null || _b === void 0 ? void 0 : _b.currentPageInstance) === null || _c === void 0 ? void 0 : _c.$cp;
                var pid = ((_e = (_d = _this.appInstance) === null || _d === void 0 ? void 0 : _d.currentPageInstance) === null || _e === void 0 ? void 0 : _e.pid) || '';
                var reqStartEventData = {
                    ty: EventDataType.reqStart,
                    id: pathname,
                    pid: pid,
                    t: +new Date()
                };
                var networkData = {
                    uri: pathname,
                    st: +new Date(),
                    req: modifiedOption.data,
                    et: -1,
                    res: {}
                };
                try {
                    if ($cp) {
                        $sm.$dm.setData(DataType.Event, reqStartEventData, $cp);
                        $sm.$dm.setData(DataType.Network, networkData, $cp);
                        $sm.$composer.compose(reqStartEventData, $cp);
                    }
                }
                catch (err) {
                    D.log(err);
                }
                modifiedOption.success = function (res) {
                    try {
                        var reqSuccEventData = {
                            ty: EventDataType.reqSucc,
                            id: pathname,
                            pid: pid,
                            t: +new Date()
                        };
                        // todo 是否需要请求头等信息呢？
                        // update networkData by refer
                        networkData.res = res.data;
                        // update succ event after networkData set
                        if ($cp) {
                            $sm.$dm.setData(DataType.Event, reqSuccEventData, $cp);
                            $sm.$composer.compose(reqSuccEventData, $cp);
                        }
                    }
                    catch (err) {
                        D.log(err);
                    }
                    if (option.success) {
                        option.success.call(this, res);
                    }
                };
                modifiedOption.fail = function (res) {
                    try {
                        var reqFailEventData = {
                            ty: EventDataType.reqFail,
                            id: pathname,
                            pid: pid,
                            t: +new Date()
                        };
                        if ($cp) {
                            $sm.$dm.setData(DataType.Event, reqFailEventData, $cp);
                            $sm.$composer.compose(reqFailEventData, $cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                    }
                    catch (err) {
                        D.log(err);
                    }
                    if (option.success) {
                        option.success.call(this, res);
                    }
                };
                if (option.url.indexOf('.gif') !== -1) {
                    return originRequest(option);
                }
                // this.log('Modified Request Exec: ')
                // this.log(option, modifiedOption)
                return originRequest(modifiedOption);
            };
        },
        enumerable: true,
        configurable: true
    });
    return StatsAppFactoryWX;
}());
export { StatsAppFactoryWX };
var StatsAppWX = /** @class */ (function () {
    function StatsAppWX($sm, originOption) {
        this.$sm = $sm;
        this.originOption = originOption;
        this.modifiedOption = __assign({}, this.originOption);
    }
    StatsAppWX.prototype.init = function () {
        this.originHooks = __assign({}, this.option);
        this.modifiedHooks = __assign({}, this.originHooks);
        this.modifiedHooks.onLaunch = this.onLaunch;
        this.modifiedHooks.onShow = this.onShow;
        this.modifiedHooks.onHide = this.onHide;
        this.modifiedOption = __assign(__assign({}, this.modifiedOption), this.modifiedHooks);
    };
    Object.defineProperty(StatsAppWX.prototype, "option", {
        get: function () {
            return this.modifiedOption;
        },
        enumerable: true,
        configurable: true
    });
    StatsAppWX.prototype.setCurrentPage = function (pi) {
        this.currentPageInstance = pi;
    };
    Object.defineProperty(StatsAppWX.prototype, "onLaunch", {
        /**
         * 小程序启动事件
         */
        get: function () {
            if (this._onLaunch) {
                return this._onLaunch;
            }
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onLaunch = function (inputs) {
                try {
                    $sm.$composer.composeBuiltin({
                        name: BuiltInName.AppLaunch,
                        pageUUID: inputs.path,
                        scene: inputs.scene || ''
                    });
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onLaunch) {
                    $originHooks.onLaunch.call(this, inputs);
                }
                D.log('安装小程序（onLaunch）');
            };
            this._onLaunch = onLaunch;
            return this._onLaunch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppWX.prototype, "onShow", {
        /**
         * 小程序整体的show事件
         */
        get: function () {
            if (this._onShow) {
                return this._onShow;
            }
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onShow = function (inputs) {
                try {
                    $sm.$composer.composeBuiltin({
                        name: BuiltInName.AppShow,
                        pageUUID: inputs.path,
                        scene: inputs.scene || ''
                    });
                    $this.startTime = +new Date;
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onShow) {
                    $originHooks.onShow.call(this, inputs);
                }
                D.log('小程序展现（onShow）');
            };
            this._onShow = onShow;
            return this._onShow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppWX.prototype, "onHide", {
        /**
         * 小程序进入后台事件
         */
        get: function () {
            if (this._onHide) {
                return this._onHide;
            }
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onHide = function (inputs) {
                var _a;
                try {
                    var pages = getCurrentPages();
                    var route = (_a = pages[pages.length - 1]) === null || _a === void 0 ? void 0 : _a.route;
                    // @ts-ignore
                    var eventDuration = parseInt((+new Date - $this.startTime) / 1000);
                    $sm.$composer.composeBuiltin({
                        name: BuiltInName.AppHide,
                        pageUUID: route,
                        event_duration: eventDuration || 1
                    });
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onHide) {
                    $originHooks.onHide.call(this, inputs);
                }
                D.log('小程序展现（onHide）');
            };
            this._onHide = onHide;
            return this._onHide;
        },
        enumerable: true,
        configurable: true
    });
    return StatsAppWX;
}());
export { StatsAppWX };
var TargetVisionStatus;
(function (TargetVisionStatus) {
    TargetVisionStatus[TargetVisionStatus["Show"] = 0] = "Show";
    TargetVisionStatus[TargetVisionStatus["Hide"] = 1] = "Hide";
})(TargetVisionStatus || (TargetVisionStatus = {}));
var StatsComponentWX = /** @class */ (function () {
    function StatsComponentWX($sm, appInstance, option) {
        this.$sm = $sm;
        this.appInstance = appInstance;
        this.isAlive = false;
        this.isActivated = false;
        this.visionCheckTimerID = null;
        this.visionCheckTimeout = 250;
        this.visionCache = {};
        this.originOption = __assign({}, option);
        this.modifiedOption = __assign({}, this.originOption);
    }
    Object.defineProperty(StatsComponentWX.prototype, "pid", {
        get: function () {
            var _a;
            return ((_a = this.$cp) === null || _a === void 0 ? void 0 : _a.pid) || '';
        },
        enumerable: true,
        configurable: true
    });
    StatsComponentWX.prototype.init = function () {
        this.originHooks = __assign({}, this.option.methods);
        this.modifiedHooks = __assign({}, this.originHooks);
        this.modifiedHooks.onLoad = this.onLoad;
        this.modifiedHooks.onShow = this.onShow;
        this.modifiedHooks.onHide = this.onHide;
        this.modifiedHooks.onUnload = this.onUnload;
        this.modifiedHooks.onShareAppMessage = this.onShareAppMessage;
        // uni-app 式的事件统一代理
        if (this.originHooks.__e) {
            var $this_1 = this;
            this.modifiedHooks.__e = function (event) {
                this.$vm.zsTracker = $this_1.eventHandler.bind(this, event);
                $this_1.originHooks.__e.call(this, event);
            };
        }
        this.modifiedOption = __assign(__assign({}, this.modifiedOption), { data: __assign(__assign({}, this.modifiedOption.data), { zsTracker: this.eventHandler }), methods: this.modifiedHooks });
    };
    StatsComponentWX.prototype.start = function (cp) {
        this.$cp = cp;
        this.isAlive = true;
        this.isActivated = true;
        this.activate();
    };
    StatsComponentWX.prototype.destroy = function () {
        this.inactivate();
        this.$cp = undefined;
        this.isAlive = false;
    };
    StatsComponentWX.prototype.activate = function () {
        var _a;
        this.isActivated = true;
        (_a = this.appInstance) === null || _a === void 0 ? void 0 : _a.setCurrentPage(this);
        this.visionCheck();
    };
    StatsComponentWX.prototype.inactivate = function () {
        var _a;
        for (var key in this.visionCache) {
            if (this.visionCache.hasOwnProperty(key)) {
                var item = this.visionCache[key];
                if ((item === null || item === void 0 ? void 0 : item.status) === TargetVisionStatus.Show) {
                    var target = item.target;
                    // D.log('真实展现（hide）', target)
                    var eventData = {
                        ty: EventDataType.viewHide,
                        id: target.id,
                        pid: this.pid,
                        t: +new Date(),
                        ext: __assign({}, target.dataset)
                    };
                    if (this.$cp) {
                        this.$sm.$dm.setData(DataType.Event, eventData, this.$cp);
                        this.$sm.$composer.compose(eventData, this.$cp);
                    }
                    else {
                        throw new Error(ErrCPDoNotExist);
                    }
                }
            }
        }
        this.visionCache = {};
        this.isActivated = false;
        this.clearVisionCheckTimer();
        (_a = this.appInstance) === null || _a === void 0 ? void 0 : _a.setCurrentPage();
    };
    StatsComponentWX.prototype.clearVisionCheckTimer = function () {
        if (this.visionCheckTimerID !== null) {
            clearTimeout(this.visionCheckTimerID);
        }
    };
    Object.defineProperty(StatsComponentWX.prototype, "visionCheck", {
        get: function () {
            if (this._visionCheck)
                return this._visionCheck;
            var $this = this;
            var $sm = this.$sm;
            var check = function () {
                var _a, _b, _c;
                // 获取在zs sdk page生命周期中的当前page
                var $page = $this.appInstance.currentPageInstance;
                if (!$page) {
                    return;
                }
                var $cp = $page.$cp;
                var pid = (_a = $this.$cp) === null || _a === void 0 ? void 0 : _a.pid;
                var pages = getCurrentPages();
                var route = (_b = pages[pages.length - 1]) === null || _b === void 0 ? void 0 : _b.route;
                // D.log('真实展现（debug）', pid, route)
                // D.log('真实展现（debug）', $this.visionCache)
                if (pid && pid === route && $this.isActivated) {
                    var suspects = Array.from(new Set($sm.$composer
                        .getSuspecteds(pid, EventDataType.viewShow)
                        .concat($sm.$composer.getSuspecteds(pid, EventDataType.viewHide))));
                    (_c = $sm.$platform) === null || _c === void 0 ? void 0 : _c.getVisibleTargets(suspects).then(function (_a) {
                        var hit = _a.hit, unhit = _a.unhit;
                        // getVisibleTargets 是异步操作，在回调里需要再次判断页面当前是否active
                        // 否则会在离开页面之后也触发viewShow的判定
                        if (!$this.isActivated) {
                            return;
                        }
                        hit.forEach(function (target) {
                            var targetInCache = $this.visionCache[target.id + "-" + target.zsQueryIndex];
                            if (targetInCache === undefined || targetInCache.status !== TargetVisionStatus.Show) {
                                var eventData = {
                                    ty: EventDataType.viewShow,
                                    id: target.id,
                                    pid: pid,
                                    t: +new Date(),
                                    ext: __assign({}, target.dataset)
                                };
                                if ($cp) {
                                    $sm.$dm.setData(DataType.Event, eventData, $cp);
                                    $sm.$composer.compose(eventData, $cp);
                                }
                                else {
                                    throw new Error(ErrCPDoNotExist);
                                }
                                $this.visionCache[target.id + "-" + target.zsQueryIndex] = {
                                    target: target,
                                    status: TargetVisionStatus.Show
                                };
                            }
                        });
                        unhit.forEach(function (target) {
                            var targetInCache = $this.visionCache[target.id + "-" + target.zsQueryIndex];
                            if ((targetInCache === null || targetInCache === void 0 ? void 0 : targetInCache.status) === TargetVisionStatus.Show) {
                                // D.log('真实展现（hide）', target)
                                var eventData = {
                                    ty: EventDataType.viewHide,
                                    id: target.id,
                                    pid: pid,
                                    t: +new Date(),
                                    ext: __assign({}, target.dataset)
                                };
                                if ($cp) {
                                    $sm.$dm.setData(DataType.Event, eventData, $cp);
                                    $sm.$composer.compose(eventData, $cp);
                                }
                                else {
                                    throw new Error(ErrCPDoNotExist);
                                }
                                $this.visionCache[target.id + "-" + target.zsQueryIndex] = {
                                    target: target,
                                    status: TargetVisionStatus.Hide
                                };
                            }
                        });
                    });
                }
                else {
                    D.log('异步的隐藏判断，上下文丢失了，用缓存上下文操作');
                }
                $this.visionCheckTimerID = setTimeout(check, $this.visionCheckTimeout);
            };
            var visionCheck = function () {
                $this.clearVisionCheckTimer();
                check();
            };
            this._visionCheck = visionCheck;
            return visionCheck;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onLoad", {
        get: function () {
            if (this._onLoad)
                return this._onLoad;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onLoad = function (inputs) {
                try {
                    if (!$this.isActivated) {
                        var cp = $this.$sm.$dm.appendDataPage(this.route);
                        $sm.$dm.setData(DataType.Context, inputs, cp);
                        $this.startTime = +new Date;
                        $sm.$composer.composeBuiltin({
                            name: BuiltInName.PageShow
                        }, cp);
                        $this.start(cp);
                    }
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onLoad) {
                    $originHooks.onLoad.call(this, inputs);
                }
                D.log('页面进入（onLoad）', this.route);
            };
            this._onLoad = onLoad;
            return onLoad;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onShow", {
        get: function () {
            if (this._onShow)
                return this._onShow;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onShow = function (inputs) {
                try {
                    if (!$this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            $sm.$dm.setData(DataType.Context, inputs, $this.$cp);
                            $this.startTime = +new Date;
                            $sm.$composer.composeBuiltin({
                                name: BuiltInName.PageShow
                            }, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                        $this.activate();
                    }
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onShow) {
                    $originHooks.onShow.call(this, inputs);
                }
                D.log('页面进入（onShow）', this.route);
            };
            this._onShow = onShow;
            return onShow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onHide", {
        get: function () {
            if (this._onHide)
                return this._onHide;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onHide = function (inputs) {
                try {
                    if ($this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            // @ts-ignore
                            var eventDuration = parseInt((+new Date - $this.startTime) / 1000);
                            $sm.$dm.setData(DataType.Context, inputs, $this.$cp);
                            $sm.$composer.composeBuiltin({
                                name: BuiltInName.PageHide,
                                event_duration: eventDuration || 1
                            }, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                        $this.inactivate();
                    }
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onHide) {
                    $originHooks.onHide.call(this, inputs);
                }
                D.log('页面离开（onHide）', this.route);
            };
            this._onHide = onHide;
            return onHide;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onUnload", {
        get: function () {
            if (this._onUnload)
                return this._onUnload;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onUnload = function (inputs) {
                try {
                    if ($this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            // @ts-ignore
                            var eventDuration = parseInt((+new Date - $this.startTime) / 1000);
                            $sm.$dm.setData(DataType.Context, inputs, $this.$cp);
                            $sm.$composer.composeBuiltin({
                                name: BuiltInName.PageHide,
                                event_duration: eventDuration || 1
                            }, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                    }
                    $this.destroy();
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onUnload) {
                    $originHooks.onUnload.call(this, inputs);
                }
                D.log('页面离开（onUnload）', this.route);
            };
            this._onUnload = onUnload;
            return onUnload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onShareAppMessage", {
        get: function () {
            if (this._onShareAppMessage)
                return this._onShareAppMessage;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onShareAppMessage = function (inputs) {
                try {
                    if ($this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            var shareEventData = {
                                ty: EventDataType.share,
                                pid: this.route,
                                id: "$share",
                                t: +new Date()
                            };
                            $sm.$dm.setData(DataType.Event, shareEventData, $this.$cp);
                            $sm.$composer.compose(shareEventData, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                        $this.activate();
                    }
                }
                catch (err) {
                    D.error(err);
                }
                var resultValue = {};
                if ($originHooks.onShareAppMessage) {
                    resultValue = $originHooks.onShareAppMessage.call(this, inputs);
                }
                D.log('触发分享', this.route);
                return resultValue;
            };
            this._onShareAppMessage = onShareAppMessage;
            return onShareAppMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "eventHandler", {
        get: function () {
            if (this._eventHandler)
                return this._eventHandler;
            var $this = this;
            var $sm = this.$sm;
            var eventHandler = function (event) {
                var _a, _b;
                try {
                    var $page_1 = $this.appInstance.currentPageInstance;
                    if (!$page_1) {
                        return;
                    }
                    var pid_1 = ((_a = $page_1.$cp) === null || _a === void 0 ? void 0 : _a.pid) || '';
                    var target = event.target, type = event.type, detail = event.detail;
                    var x = detail.x, y = detail.y;
                    var innerType = type;
                    switch (type) {
                        case 'tap':
                            innerType = EventDataType.click;
                            break;
                        default:
                            break;
                    }
                    if (type === 'tap') {
                        var suspects = $sm.$composer.getSuspecteds(pid_1, innerType);
                        var ctx = this;
                        (_b = $sm.$platform) === null || _b === void 0 ? void 0 : _b.getHitTargets(x, y, suspects, ctx, target).then(function (targets) {
                            targets.forEach(function (target) {
                                var ext = __assign({}, target.dataset);
                                try {
                                    if (ext.zsIdx !== undefined && ext.zsList !== undefined) {
                                        ext.zsItem = ext.zsList[ext.zsIdx] || {};
                                    }
                                }
                                catch (e) {
                                    D.log(e);
                                }
                                var eventData = {
                                    ty: EventDataType.click,
                                    id: target.id,
                                    pid: pid_1,
                                    t: +new Date(),
                                    ext: ext
                                };
                                if ($page_1.$cp) {
                                    $sm.$dm.setData(DataType.Event, eventData, $page_1.$cp);
                                    $sm.$composer.compose(eventData, $page_1.$cp);
                                }
                                else {
                                    throw new Error(ErrCPDoNotExist);
                                }
                            });
                        });
                    }
                    if (type === 'longpress') {
                        wx.setClipboardData({
                            data: $sm.$dm.$global.i,
                            success: function () {
                                wx.getClipboardData({
                                    success: function (res) {
                                        console.log('复制：', res.data); // data
                                    }
                                });
                            }
                        });
                    }
                }
                catch (err) {
                    D.error(err);
                }
            };
            this._eventHandler = eventHandler;
            return eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "option", {
        get: function () {
            return this.modifiedOption;
        },
        enumerable: true,
        configurable: true
    });
    return StatsComponentWX;
}());
export { StatsComponentWX };
var StatsPageWX = /** @class */ (function (_super) {
    __extends(StatsPageWX, _super);
    function StatsPageWX() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StatsPageWX.prototype.init = function () {
        this.originHooks = __assign({}, this.option);
        this.modifiedHooks = __assign({}, this.originHooks);
        this.modifiedHooks.onLoad = this.onLoad;
        this.modifiedHooks.onShow = this.onShow;
        this.modifiedHooks.onHide = this.onHide;
        this.modifiedHooks.onUnload = this.onUnload;
        this.modifiedHooks.onShareAppMessage = this.onShareAppMessage;
        this.modifiedOption = __assign(__assign({}, this.modifiedOption), this.modifiedHooks);
    };
    return StatsPageWX;
}(StatsComponentWX));
export { StatsPageWX };
//# sourceMappingURL=page.js.map