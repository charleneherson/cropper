import { __assign } from "tslib";
import { TestRule } from './dev-rules';
import { DataType, EventDataType, Comparator, ActType, ValueType } from '@zyb-data/stats-core';
import { D } from './debug';
import { Env } from './config';
import { ready, StatsReady } from './ready';
/**
 * 规则本地存储key
 */
var CachedRuleStoreKey = 'cache_rules';
/**
 * StatsComposer
 * 规则处理器
 */
var StatsComposer = /** @class */ (function () {
    /**
     *
     * @param platform 平台实例
     * @param dm 数据服务
     * @param logger 日志服务
     * @param config 配置服务
     */
    function StatsComposer(platform, dm, logger, config) {
        this.platform = platform;
        this.dm = dm;
        this.logger = logger;
        this.config = config;
        // @ts-ignore
        this.configDetails = TestRule;
        /**
         * 预处理后的规则索引表
         */
        this.rulesMap = {};
        /**
         * ready 方法，一些地方需要等composer ready
         */
        this.composerReady = new StatsReady();
        // 如果开启了使用本地调试的话，直接初始化本地测试规则
        if (this.config.get().useLocalRules) {
            // @ts-ignore
            this.rulesMap = this.preprocessRules(TestRule);
            D.log('Mock 配置索引', this.rulesMap);
        }
    }
    Object.defineProperty(StatsComposer.prototype, "ready", {
        get: function () {
            return this.composerReady.ready.bind(this.composerReady);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新配置
     */
    StatsComposer.prototype.update = function () {
        var _this = this;
        // 如果开启了使用本地调试的话，不请求远程的配置文件，使用项目内的testrule调试
        if (this.config.get().useLocalRules) {
            // @ts-ignore
            this.rulesMap = this.preprocessRules(TestRule);
            this.composerReady.init();
            D.log('Mock 配置索引', this.rulesMap);
            return;
        }
        // 获取配置概要，只包含当前最新配置文件md5和下载地址，不包含配置内容
        this.platform
            .request({
            url: "https://zyb-stats.zuoyebang.cc/stats/" + this.config.get().zpID + (this.config.get().env === Env.Dev ? '.test' : '') + ".json?t=" + +new Date()
        })
            .then(function (res) {
            var _a;
            var configFileUrl = (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.fileName;
            var md5 = res.data.md5;
            if (!configFileUrl || !md5) {
                D.error('配置未发布');
                return;
            }
            // 尝试获取缓存配置，并比较md5
            var cachedRuleStr = _this.platform.getStore(CachedRuleStoreKey);
            if (cachedRuleStr) {
                try {
                    var cachedRule = JSON.parse(cachedRuleStr);
                    if (cachedRule && cachedRule.md5 === md5) {
                        _this.rulesMap = _this.preprocessRules(cachedRule.data);
                        D.sys('已加载并使用缓存配置', _this.rulesMap);
                        _this.composerReady.init();
                        return;
                    }
                }
                catch (e) {
                    // 无有效缓存
                }
            }
            // 根据md5及下载地址，获取远程完整网络配置，并缓存
            _this.platform
                .request({
                url: configFileUrl
            })
                .then(function (res) {
                _this.rulesMap = _this.preprocessRules(res.data);
                D.sys('已加载并使用远程配置', _this.rulesMap);
                _this.platform.setStore(CachedRuleStoreKey, JSON.stringify({
                    md5: md5,
                    data: res.data
                }));
                D.sys('配置已缓存');
                _this.composerReady.init();
            }, function (err) {
                D.error('获取配置文件失败', err);
            });
        }, function (err) {
            D.error('获取配置md5失败', err);
        });
    };
    /**
     * 获取可能命中规则的id列表
     * @param pid 页面id
     * @param et 事件类型
     */
    StatsComposer.prototype.getSuspecteds = function (pid, et) {
        var _a;
        var result = (_a = this.rulesMap[pid]) === null || _a === void 0 ? void 0 : _a[et];
        var ids = (result === null || result === void 0 ? void 0 : result.ids) || [];
        return Array.from(ids);
    };
    /**
     * 判断事件id是否可能命中规则
     * @param pid 页面id
     * @param et 事件类型
     * @param eid 事件id
     */
    StatsComposer.prototype.isSuspected = function (pid, et, eid) {
        var _a, _b;
        return (_b = (_a = this.rulesMap[pid]) === null || _a === void 0 ? void 0 : _a[et]) === null || _b === void 0 ? void 0 : _b.ids.has(eid);
    };
    /**
     * 处理内置事件
     * 内置事件无需匹配规则
     * @param data 内置事件参数
     * @param cp 页面数据上下文
     */
    StatsComposer.prototype.composeBuiltin = function (data, cp) {
        var _this = this;
        if (!this.config.get().buildInTraking) {
            return;
        }
        var t = +new Date();
        ready(function () {
            var d = _this.logger.send(__assign(__assign(__assign(__assign({}, _this.dm.$global), _this.dm.$common), { pageUUID: (cp === null || cp === void 0 ? void 0 : cp.pid) || '', act: ActType.view, t: t }), data));
            D.info(data.name, '内置统计', d);
        });
    };
    /**
     * 处理事件数据，进行规则匹配
     * 遍历所有命中规则进行匹配处理
     * @param data 事件数据
     * @param cp 产生当前事件的页面数据上下文
     */
    StatsComposer.prototype.compose = function (data, cp) {
        var _this = this;
        var ty = data.ty, t = data.t, id = data.id, pid = data.pid;
        // 必须要等规则加载完以后才能触发对比
        this.ready(function () {
            var _a, _b, _c;
            var rules = (_c = (_b = (_a = _this.rulesMap[pid]) === null || _a === void 0 ? void 0 : _a[ty]) === null || _b === void 0 ? void 0 : _b.rules) === null || _c === void 0 ? void 0 : _c.get(id);
            if (rules) {
                D.group('Compose ');
                D.log("\u547D\u4E2D\u4E8B\u4EF6\u3001\u5F53\u524D\u6570\u636E\u6C60\u3001\u5F53\u524D\u5F85\u5339\u914D\u89C4\u5219 ", data, cp, rules);
                D.log("\u83B7\u53D6\u89C4\u5219 this.rulesMap[" + pid + "]?.[" + ty + "]?.rules?.get(" + id + ")");
                // 已经通过规则索引表索引到对应的规则
                // 当前事件数据已符合rules列表中的规则的主要条件
                // 遍历所有命中主条件被命中的规则，进行进一步的检查
                rules.forEach(function (rule) {
                    _this.handleRule(data, rule, cp);
                });
            }
            rules && D.groupEnd();
        });
    };
    /**
     * 单条规则的匹配
     * @param data 事件数据
     * @param rule 规则
     * @param cp 产生当前事件的页面数据上下文
     */
    StatsComposer.prototype.handleRule = function (data, rule, cp) {
        var _this = this;
        var ty = data.ty, t = data.t, id = data.id, _a = data.ext, ext = _a === void 0 ? {} : _a, pid = data.pid;
        var conditions = rule.cds;
        var fields = rule.fs;
        var name = rule.ln;
        var lnc = rule.lnc;
        var act = rule.act;
        var isFullyMatch = true;
        // 匹配其他条件
        for (var i = 0; i < conditions.length; i++) {
            var condition = conditions[i];
            isFullyMatch = this.compare(this.dm.getData(condition.tar, cp), condition.s, condition.c);
            D.log("\u6761\u4EF6\uFF1A" + JSON.stringify(condition) + ", \u5339\u914D\u7ED3\u679C\uFF1A" + isFullyMatch);
            // 任意条件不匹配则不命中本规则
            if (!isFullyMatch) {
                break;
            }
        }
        // 完全命中规则，开始取上报业务字段，进行参数整理
        if (isFullyMatch) {
            var params_1 = {};
            fields.forEach(function (filed) {
                params_1[filed.to] = _this.dm.getData(filed.fr, cp);
            });
            var d = this.logger.send(__assign(__assign(__assign(__assign({}, this.dm.$global), this.dm.$common), { name: name,
                t: t,
                lnc: lnc,
                act: act, pageUUID: cp.pid }), params_1));
            D.info(name, lnc, d);
        }
    };
    /**
     * 比较方法
     * @param a 值a
     * @param b 值b，值b会声明类型，详见 {@link Value} 类型
     * @param c 比较符
     */
    StatsComposer.prototype.compare = function (a, b, c) {
        D.log("COMPARE: (" + a + ") [" + c + "] (" + b.v + " as " + b.t + ")");
        switch (b.t) {
            case ValueType.Number:
                a = +a;
                break;
            case ValueType.String:
                a = '' + a;
                break;
            default:
                break;
        }
        var v = b.v;
        switch (c) {
            case Comparator.Equal:
                return a === v;
            case Comparator.NEQ:
                return a !== v;
            case Comparator.GT:
                return a > v;
            case Comparator.LT:
                return a < v;
            case Comparator.Like:
                return (a === null || a === void 0 ? void 0 : a.indexOf(v)) !== -1;
            case Comparator.Exist:
                return a !== undefined && a !== '';
            default:
                return false;
        }
    };
    /**
     * 预处理规则，以提高规则索引速度和提供数据池过滤依据
     *
     * @param configs 远程配置完整内容
     */
    StatsComposer.prototype.preprocessRules = function (configs) {
        var rulesMap = {};
        configs.rules.forEach(function (r) {
            // 待push到索引表中的id集合
            var idCollections = [];
            idCollections.push({ et: r.et, eid: r.eid });
            // 抽取条件中覆盖到的元素id和网络请求id
            r.cds.forEach(function (cd) {
                try {
                    var tar = cd.tar;
                    if (tar.ty === DataType.Event) {
                        idCollections.push({ et: tar.et, eid: tar.eid });
                    }
                    if (tar.ty === DataType.Network) {
                        idCollections.push({ et: EventDataType.reqStart, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqSucc, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqFail, eid: tar.u });
                    }
                }
                catch (err) {
                    D.error(err, r);
                }
            });
            // 抽取字段声明中覆盖到的元素id和网络请求id
            r.fs.forEach(function (f) {
                try {
                    var tar = f.fr;
                    if (tar.ty === DataType.Event) {
                        idCollections.push({ et: tar.et, eid: tar.eid });
                    }
                    if (tar.ty === DataType.Network) {
                        idCollections.push({ et: EventDataType.reqStart, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqSucc, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqFail, eid: tar.u });
                    }
                }
                catch (err) {
                    D.error(err, r);
                }
            });
            // 以页面、事件类型两个维度，重新组织数据
            r.ps.forEach(function (p) {
                var _a;
                if (!rulesMap[p]) {
                    rulesMap[p] = {};
                }
                if (!rulesMap[p][r.et]) {
                    rulesMap[p][r.et] = {
                        ids: new Set(),
                        rules: new Map()
                    };
                }
                if (!rulesMap[p][r.et].rules.get(r.eid)) {
                    rulesMap[p][r.et].rules.set(r.eid, []);
                }
                (_a = rulesMap[p][r.et].rules.get(r.eid)) === null || _a === void 0 ? void 0 : _a.push(r);
                idCollections.forEach(function (kv) {
                    if (!kv.et || !kv.eid) {
                        return;
                    }
                    if (!rulesMap[p][kv.et]) {
                        rulesMap[p][kv.et] = {
                            ids: new Set(),
                            rules: new Map()
                        };
                    }
                    rulesMap[p][kv.et].ids.add(kv.eid);
                });
            });
        });
        return rulesMap;
    };
    return StatsComposer;
}());
export { StatsComposer };
//# sourceMappingURL=composer.js.map