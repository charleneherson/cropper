import { parse } from 'url';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/**
 * 事件类型枚举
 */
var EventDataType;
(function (EventDataType) {
    /**
     * 进入页面
     */
    EventDataType["pageIn"] = "pageIn";
    /**
     * 离开页面
     */
    EventDataType["pageOut"] = "pageOut";
    /**
     * 控件显示
     */
    EventDataType["viewShow"] = "viewShow";
    /**
     * 控件隐藏
     */
    EventDataType["viewHide"] = "viewHide";
    /**
     * 点击
     */
    EventDataType["click"] = "click";
    /**
     * 请求开始
     */
    EventDataType["reqStart"] = "reqStart";
    /**
     * 请求成功
     */
    EventDataType["reqSucc"] = "reqSucc";
    /**
     * 请求失败
     */
    EventDataType["reqFail"] = "reqFail";
    /**
     * 分享
     */
    EventDataType["share"] = "share";
})(EventDataType || (EventDataType = {}));
/**
 * 比较符枚举
 * @remark 未作特殊说明的操作符，对任意类型都支持
 */
var Comparator;
(function (Comparator) {
    /**
     * 等于
     */
    Comparator["Equal"] = "eq";
    /**
     * 不等于
     */
    Comparator["NEQ"] = "neq";
    /**
     * 大于
     * @remark 仅支持数字
     */
    Comparator["GT"] = "gt";
    /**
     * 小于
     * @remark 仅支持数字
     */
    Comparator["LT"] = "lt";
    /**
     * 字符串匹配
     * @remark 仅支持字符串
     */
    Comparator["Like"] = "lk";
    /**
     * 字段存在
     */
    Comparator["Exist"] = "ex";
})(Comparator || (Comparator = {}));
/**
 * 资源类型枚举
 */
var DataType;
(function (DataType) {
    /**
     * 全局数据
     */
    DataType[DataType["Global"] = 1] = "Global";
    /**
     * 事件数据
     */
    DataType[DataType["Event"] = 2] = "Event";
    /**
     * 网络数据
     */
    DataType[DataType["Network"] = 3] = "Network";
    /**
     * 页面上下文
     * @remark Native无此数据
     */
    DataType[DataType["Context"] = 4] = "Context";
})(DataType || (DataType = {}));
/**
 * 设备类型枚举
 */
var DeviceType;
(function (DeviceType) {
    DeviceType["android"] = "android";
    DeviceType["iphone"] = "iphone";
    DeviceType["ipad"] = "ipad";
    DeviceType["windows"] = "windows";
    DeviceType["mac"] = "mac";
    DeviceType["others"] = "others";
})(DeviceType || (DeviceType = {}));
var ActType;
(function (ActType) {
    ActType["click"] = "clk";
    ActType["view"] = "view";
    ActType["vision"] = "vision";
    ActType["default"] = "";
})(ActType || (ActType = {}));
/**
 * 网络状态枚举
 */
var NetworkStatusType;
(function (NetworkStatusType) {
    NetworkStatusType["Wifi"] = "wifi";
    NetworkStatusType["N_5G"] = "5G";
    NetworkStatusType["N4G"] = "4G";
    NetworkStatusType["N3G"] = "3G";
    NetworkStatusType["N2G"] = "2G";
    NetworkStatusType["Others"] = "others";
})(NetworkStatusType || (NetworkStatusType = {}));
/**
 * 键类型枚举
 */
var KeyType;
(function (KeyType) {
    /**
     * 字典键(dic) 按字典取值
     */
    KeyType["Dict"] = "d";
    /**
     * 数组键(arr) 按数组取值
     */
    KeyType["Arr"] = "a";
})(KeyType || (KeyType = {}));
/**
 * 值类型枚举
 */
var ValueType;
(function (ValueType) {
    /**
     * 字符串
     */
    ValueType["String"] = "s";
    /**
     * 数字
     */
    ValueType["Number"] = "n";
})(ValueType || (ValueType = {}));
/**
 * 内置事件名枚举
 */
var BuiltInName;
(function (BuiltInName) {
    BuiltInName["AppLaunch"] = "$AppLaunch";
    BuiltInName["AppShow"] = "$AppShow";
    BuiltInName["AppHide"] = "$AppHide";
    BuiltInName["PageShow"] = "$PageShow";
    BuiltInName["PageHide"] = "$PageHide";
    BuiltInName["PageShare"] = "$PageShare";
})(BuiltInName || (BuiltInName = {}));

var StatsDebugger = /** @class */ (function () {
    function StatsDebugger() {
        this.logsCache = [];
        this.isDebug = true;
        this.isInfo = true;
    }
    StatsDebugger.prototype.switch = function (isDebug) {
        this.isDebug = isDebug;
    };
    StatsDebugger.prototype.group = function (label) {
        if (this.isDebug) {
            console.group('%c _ZS_ ' + label, 'background: #666; color: #badaff');
        }
    };
    StatsDebugger.prototype.groupEnd = function () {
        if (this.isDebug) {
            console.groupEnd();
        }
    };
    StatsDebugger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.isDebug) {
            console.log.apply(console, __spreadArrays(['%c _ZS_LOG_ ', 'background: #666; color: #badaff'], args));
        }
    };
    StatsDebugger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.isInfo) {
            console.log.apply(console, __spreadArrays(['%c _ZS_INF_ ', 'background: #666; color: #bada55'], args));
        }
    };
    StatsDebugger.prototype.sys = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.log.apply(console, __spreadArrays(['%c _ZS_SYS_ ', 'background: #666; color: #ffffff'], args));
    };
    StatsDebugger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.log.apply(console, __spreadArrays(['%c _ZS_ERR_ ', 'background: #666; color: #ff5555'], args));
    };
    StatsDebugger.prototype.pushRecord = function (log) {
        this.logsCache.push(log);
    };
    StatsDebugger.prototype.clearRecords = function (log) {
        this.logsCache = [];
    };
    StatsDebugger.prototype.groupRecords = function () {
        console.log('%c _ZS_RECORDS_GROUP_ ', 'background: #666; color: #bada55');
        console.group('已打点位');
        this.logsCache.forEach(function (v, i) {
            console.log(i, v.name, v.lnc, v.pageUUID);
        });
        console.groupEnd();
    };
    StatsDebugger.prototype.tableRecords = function () {
        console.log('%c _ZS_RECORDS_TABLE_ ', 'background: #666; color: #bada55');
        console.table(this.logsCache, ['name', 'lnc', 'pageUUID']);
    };
    return StatsDebugger;
}());
var D = new StatsDebugger();

/**
 * 全局数据默认值
 */
var defaultGlobalData = {
    paid: '-1',
    un: '',
    i: '',
    fr: DeviceType.others,
    mc: '',
    sv: '',
    s: '',
    l: NetworkStatusType.Others,
    channel: '',
    av: '',
    op: '',
    sdkVersion: '',
    ip: '',
    plat: '',
    pageUUID: '',
    act: ActType.default
};
/**
 * 数据池管理器
 */
var StatsDataPoolManager = /** @class */ (function () {
    /**
     *
     * @param $config 配置服务
     */
    function StatsDataPoolManager($config) {
        this.$config = $config;
        this.dataPool = {
            gl: __assign({}, defaultGlobalData),
            dp: []
        };
    }
    /**
     * 插入新页面数据
     * @param pid 页面id
     */
    StatsDataPoolManager.prototype.appendDataPage = function (pid) {
        if (pid === void 0) { pid = ''; }
        var dp = this.createDataPage(pid);
        this.$dp.push(dp);
        return dp;
    };
    /**
     * 创建页面数据
     * @param pid 页面id
     */
    StatsDataPoolManager.prototype.createDataPage = function (pid) {
        if (pid === void 0) { pid = ''; }
        var dataPage = {
            pid: pid,
            st: +new Date(),
            et: 0,
            events: new Map(),
            networks: new Map(),
            contexts: {}
        };
        return dataPage;
    };
    /**
     * 获取页面数据
     * @param lb lookback 回溯层级 @default 0
     */
    StatsDataPoolManager.prototype.getDataPage = function (lb) {
        if (lb === void 0) { lb = 0; }
        return this.dataPool.dp[this.dataPool.dp.length - 1 - lb];
    };
    /**
     * 获取当前页面数据
     */
    StatsDataPoolManager.prototype.getCurrentDataPage = function () {
        return this.getDataPage();
    };
    /**
     * 设置数据
     * @param dataType 数据类型
     * @param value 数据值
     * @param cp 当前页面上下文数据
     */
    StatsDataPoolManager.prototype.setData = function (dataType, value, cp) {
        var _a, _b, _c, _d, _e;
        switch (dataType) {
            case DataType.Global:
                this.$global = __assign(__assign({}, this.$global), value);
                break;
            case DataType.Context:
                cp.contexts = __assign(__assign({}, cp.contexts), value);
                break;
            case DataType.Event:
                var _f = value, ty = _f.ty, id = _f.id;
                if (!cp.events.get(ty)) {
                    cp.events.set(ty, new Map());
                }
                if (!((_a = cp.events.get(ty)) === null || _a === void 0 ? void 0 : _a.get(id))) {
                    (_b = cp.events.get(ty)) === null || _b === void 0 ? void 0 : _b.set(id, []);
                }
                (_d = (_c = cp.events
                    .get(ty)) === null || _c === void 0 ? void 0 : _c.get(id)) === null || _d === void 0 ? void 0 : _d.push(value);
                break;
            case DataType.Network:
                var uri = value.uri;
                if (!cp.networks.get(uri)) {
                    cp.networks.set(uri, []);
                }
                (_e = cp.networks.get(uri)) === null || _e === void 0 ? void 0 : _e.push(value);
                break;
            default:
                D.error('Invalid DataType.');
        }
        return value;
    };
    /**
     * 获取数据
     * @param dd 数据描述
     * @param cp 当前页面上下文数据
     */
    StatsDataPoolManager.prototype.getData = function (dd, cp) {
        var ty = dd.ty, _a = dd.lb, lb = _a === void 0 ? 0 : _a, et = dd.et, eid = dd.eid, _b = dd.u, u = _b === void 0 ? '' : _b, _c = dd.ks, ks = _c === void 0 ? [] : _c;
        cp = cp || this.getDataPage(lb);
        switch (ty) {
            case DataType.Global:
                return this.access(this.$global, ks);
            case DataType.Context:
                return this.access(cp.contexts, ks);
            case DataType.Event:
                return this.access(this.searchEvent(cp, et, eid), ks);
            case DataType.Network:
                return this.access(this.searchNetwork(cp, u), ks);
            default:
                return undefined;
        }
    };
    StatsDataPoolManager.prototype.getPool = function () {
        return this.dataPool;
    };
    Object.defineProperty(StatsDataPoolManager.prototype, "$dp", {
        get: function () {
            return this.dataPool.dp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsDataPoolManager.prototype, "$global", {
        get: function () {
            return this.dataPool.gl;
        },
        set: function (gl) {
            this.dataPool.gl = __assign(__assign({}, this.dataPool.gl), gl);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置全局数据
     * @param data kv
     */
    StatsDataPoolManager.prototype.setGlobal = function (data) {
        this.dataPool.gl = __assign(__assign({}, this.dataPool.gl), data);
    };
    Object.defineProperty(StatsDataPoolManager.prototype, "$common", {
        get: function () {
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsDataPoolManager.prototype, "$currentPage", {
        get: function () {
            return this.getCurrentDataPage();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 对obj进行任意层级的安全取值方法
     *
     * @param obj 目标对象
     * @param ks keys
     */
    StatsDataPoolManager.prototype.access = function (obj, ks) {
        if (ks === void 0) { ks = []; }
        var defaultValue = '';
        if (!obj) {
            return defaultValue;
        }
        var iter = obj;
        for (var i = 0; i < ks.length; i++) {
            var _a = ks[i], t = _a.t, v = _a.v;
            // todo 区分object和数组
            iter = iter[v];
            if (iter === undefined) {
                break;
            }
        }
        return iter === undefined ? defaultValue : iter;
    };
    // 暂时没用到
    StatsDataPoolManager.prototype.searchEvents = function (cp, ty, eid) {
        var _a;
        if (eid) {
            var results = (_a = cp.events.get(ty)) === null || _a === void 0 ? void 0 : _a.get(eid);
            return results || [];
        }
        // todo 模糊搜索支持
        return [];
    };
    StatsDataPoolManager.prototype.searchEvent = function (cp, ty, eid) {
        var list = this.searchEvents(cp, ty, eid);
        return list[list.length - 1];
    };
    StatsDataPoolManager.prototype.searchNetworks = function (cp, u) {
        var results = cp.networks.get(u);
        return results || [];
    };
    StatsDataPoolManager.prototype.searchNetwork = function (cp, u) {
        var list = this.searchNetworks(cp, u);
        return list[list.length - 1];
    };
    return StatsDataPoolManager;
}());

var TestRule = {
    id: '14',
    projectName: '',
    rules: [],
    fields: [
        'name',
        't',
        'paid',
        'un',
        'i',
        'fr',
        'mc',
        'sv',
        's',
        'l',
        'channel',
        'c',
        'zpID',
        'av',
        'mp_gender',
        'op',
        'sdkVersion',
        'mp_un',
        'ip',
        'mp_unionid',
        'gps',
        'mp_appid',
        'pageUUID',
        'flowPond',
        'plat',
        'orifrom',
        'lastfrom'
    ]
};

/**
 * 环境值
 */
var Env;
(function (Env) {
    Env["Dev"] = "development";
    Env["Prod"] = "production";
    Env["Gray"] = "gray";
})(Env || (Env = {}));
/**
 * 配置共享池
 */
var StatsConfigService = /** @class */ (function () {
    /**
     *
     * @param config
     */
    function StatsConfigService(config) {
        this.config = config;
    }
    StatsConfigService.prototype.get = function () {
        return this.config;
    };
    StatsConfigService.prototype.set = function (config) {
        this.config = __assign(__assign({}, this.config), config);
    };
    return StatsConfigService;
}());

var StatsReady = /** @class */ (function () {
    function StatsReady() {
        this.callbacks = [];
        this.initialized = false;
    }
    StatsReady.prototype.init = function () {
        this.initialized = true;
        if (this.callbacks.length) {
            this.callbacks.forEach(function (fn) {
                fn();
            });
        }
    };
    StatsReady.prototype.ready = function (fn) {
        if (!this.initialized) {
            this.callbacks.push(fn);
            return;
        }
        fn();
    };
    return StatsReady;
}());
var statsReady = new StatsReady();
function ready(fn) {
    statsReady.ready(fn);
}

/**
 * 规则本地存储key
 */
var CachedRuleStoreKey = 'cache_rules';
/**
 * StatsComposer
 * 规则处理器
 */
var StatsComposer = /** @class */ (function () {
    /**
     *
     * @param platform 平台实例
     * @param dm 数据服务
     * @param logger 日志服务
     * @param config 配置服务
     */
    function StatsComposer(platform, dm, logger, config) {
        this.platform = platform;
        this.dm = dm;
        this.logger = logger;
        this.config = config;
        // @ts-ignore
        this.configDetails = TestRule;
        /**
         * 预处理后的规则索引表
         */
        this.rulesMap = {};
        /**
         * ready 方法，一些地方需要等composer ready
         */
        this.composerReady = new StatsReady();
        // 如果开启了使用本地调试的话，直接初始化本地测试规则
        if (this.config.get().useLocalRules) {
            // @ts-ignore
            this.rulesMap = this.preprocessRules(TestRule);
            D.log('Mock 配置索引', this.rulesMap);
        }
    }
    Object.defineProperty(StatsComposer.prototype, "ready", {
        get: function () {
            return this.composerReady.ready.bind(this.composerReady);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新配置
     */
    StatsComposer.prototype.update = function () {
        var _this = this;
        // 如果开启了使用本地调试的话，不请求远程的配置文件，使用项目内的testrule调试
        if (this.config.get().useLocalRules) {
            // @ts-ignore
            this.rulesMap = this.preprocessRules(TestRule);
            this.composerReady.init();
            D.log('Mock 配置索引', this.rulesMap);
            return;
        }
        // 获取配置概要，只包含当前最新配置文件md5和下载地址，不包含配置内容
        this.platform
            .request({
            url: "https://zyb-stats.zuoyebang.cc/stats/" + this.config.get().zpID + (this.config.get().env === Env.Dev ? '.test' : '') + ".json?t=" + +new Date()
        })
            .then(function (res) {
            var _a;
            var configFileUrl = (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.fileName;
            var md5 = res.data.md5;
            if (!configFileUrl || !md5) {
                D.error('配置未发布');
                return;
            }
            // 尝试获取缓存配置，并比较md5
            var cachedRuleStr = _this.platform.getStore(CachedRuleStoreKey);
            if (cachedRuleStr) {
                try {
                    var cachedRule = JSON.parse(cachedRuleStr);
                    if (cachedRule && cachedRule.md5 === md5) {
                        _this.rulesMap = _this.preprocessRules(cachedRule.data);
                        D.sys('已加载并使用缓存配置', _this.rulesMap);
                        _this.composerReady.init();
                        return;
                    }
                }
                catch (e) {
                    // 无有效缓存
                }
            }
            // 根据md5及下载地址，获取远程完整网络配置，并缓存
            _this.platform
                .request({
                url: configFileUrl
            })
                .then(function (res) {
                _this.rulesMap = _this.preprocessRules(res.data);
                D.sys('已加载并使用远程配置', _this.rulesMap);
                _this.platform.setStore(CachedRuleStoreKey, JSON.stringify({
                    md5: md5,
                    data: res.data
                }));
                D.sys('配置已缓存');
                _this.composerReady.init();
            }, function (err) {
                D.error('获取配置文件失败', err);
            });
        }, function (err) {
            D.error('获取配置md5失败', err);
        });
    };
    /**
     * 获取可能命中规则的id列表
     * @param pid 页面id
     * @param et 事件类型
     */
    StatsComposer.prototype.getSuspecteds = function (pid, et) {
        var _a;
        var result = (_a = this.rulesMap[pid]) === null || _a === void 0 ? void 0 : _a[et];
        var ids = (result === null || result === void 0 ? void 0 : result.ids) || [];
        return Array.from(ids);
    };
    /**
     * 判断事件id是否可能命中规则
     * @param pid 页面id
     * @param et 事件类型
     * @param eid 事件id
     */
    StatsComposer.prototype.isSuspected = function (pid, et, eid) {
        var _a, _b;
        return (_b = (_a = this.rulesMap[pid]) === null || _a === void 0 ? void 0 : _a[et]) === null || _b === void 0 ? void 0 : _b.ids.has(eid);
    };
    /**
     * 处理内置事件
     * 内置事件无需匹配规则
     * @param data 内置事件参数
     * @param cp 页面数据上下文
     */
    StatsComposer.prototype.composeBuiltin = function (data, cp) {
        var _this = this;
        if (!this.config.get().buildInTraking) {
            return;
        }
        var t = +new Date();
        ready(function () {
            var d = _this.logger.send(__assign(__assign(__assign(__assign({}, _this.dm.$global), _this.dm.$common), { pageUUID: (cp === null || cp === void 0 ? void 0 : cp.pid) || '', act: ActType.view, t: t }), data));
            D.info(data.name, '内置统计', d);
        });
    };
    /**
     * 处理事件数据，进行规则匹配
     * 遍历所有命中规则进行匹配处理
     * @param data 事件数据
     * @param cp 产生当前事件的页面数据上下文
     */
    StatsComposer.prototype.compose = function (data, cp) {
        var _this = this;
        var ty = data.ty, t = data.t, id = data.id, pid = data.pid;
        // 必须要等规则加载完以后才能触发对比
        this.ready(function () {
            var _a, _b, _c;
            var rules = (_c = (_b = (_a = _this.rulesMap[pid]) === null || _a === void 0 ? void 0 : _a[ty]) === null || _b === void 0 ? void 0 : _b.rules) === null || _c === void 0 ? void 0 : _c.get(id);
            if (rules) {
                D.group('Compose ');
                D.log("\u547D\u4E2D\u4E8B\u4EF6\u3001\u5F53\u524D\u6570\u636E\u6C60\u3001\u5F53\u524D\u5F85\u5339\u914D\u89C4\u5219 ", data, cp, rules);
                D.log("\u83B7\u53D6\u89C4\u5219 this.rulesMap[" + pid + "]?.[" + ty + "]?.rules?.get(" + id + ")");
                // 已经通过规则索引表索引到对应的规则
                // 当前事件数据已符合rules列表中的规则的主要条件
                // 遍历所有命中主条件被命中的规则，进行进一步的检查
                rules.forEach(function (rule) {
                    _this.handleRule(data, rule, cp);
                });
            }
            rules && D.groupEnd();
        });
    };
    /**
     * 单条规则的匹配
     * @param data 事件数据
     * @param rule 规则
     * @param cp 产生当前事件的页面数据上下文
     */
    StatsComposer.prototype.handleRule = function (data, rule, cp) {
        var _this = this;
        var ty = data.ty, t = data.t, id = data.id, _a = data.ext, pid = data.pid;
        var conditions = rule.cds;
        var fields = rule.fs;
        var name = rule.ln;
        var lnc = rule.lnc;
        var act = rule.act;
        var isFullyMatch = true;
        // 匹配其他条件
        for (var i = 0; i < conditions.length; i++) {
            var condition = conditions[i];
            isFullyMatch = this.compare(this.dm.getData(condition.tar, cp), condition.s, condition.c);
            D.log("\u6761\u4EF6\uFF1A" + JSON.stringify(condition) + ", \u5339\u914D\u7ED3\u679C\uFF1A" + isFullyMatch);
            // 任意条件不匹配则不命中本规则
            if (!isFullyMatch) {
                break;
            }
        }
        // 完全命中规则，开始取上报业务字段，进行参数整理
        if (isFullyMatch) {
            var params_1 = {};
            fields.forEach(function (filed) {
                params_1[filed.to] = _this.dm.getData(filed.fr, cp);
            });
            var d = this.logger.send(__assign(__assign(__assign(__assign({}, this.dm.$global), this.dm.$common), { name: name,
                t: t,
                lnc: lnc,
                act: act, pageUUID: cp.pid }), params_1));
            D.info(name, lnc, d);
        }
    };
    /**
     * 比较方法
     * @param a 值a
     * @param b 值b，值b会声明类型，详见 {@link Value} 类型
     * @param c 比较符
     */
    StatsComposer.prototype.compare = function (a, b, c) {
        D.log("COMPARE: (" + a + ") [" + c + "] (" + b.v + " as " + b.t + ")");
        switch (b.t) {
            case ValueType.Number:
                a = +a;
                break;
            case ValueType.String:
                a = '' + a;
                break;
        }
        var v = b.v;
        switch (c) {
            case Comparator.Equal:
                return a === v;
            case Comparator.NEQ:
                return a !== v;
            case Comparator.GT:
                return a > v;
            case Comparator.LT:
                return a < v;
            case Comparator.Like:
                return (a === null || a === void 0 ? void 0 : a.indexOf(v)) !== -1;
            case Comparator.Exist:
                return a !== undefined && a !== '';
            default:
                return false;
        }
    };
    /**
     * 预处理规则，以提高规则索引速度和提供数据池过滤依据
     *
     * @param configs 远程配置完整内容
     */
    StatsComposer.prototype.preprocessRules = function (configs) {
        var rulesMap = {};
        configs.rules.forEach(function (r) {
            // 待push到索引表中的id集合
            var idCollections = [];
            idCollections.push({ et: r.et, eid: r.eid });
            // 抽取条件中覆盖到的元素id和网络请求id
            r.cds.forEach(function (cd) {
                try {
                    var tar = cd.tar;
                    if (tar.ty === DataType.Event) {
                        idCollections.push({ et: tar.et, eid: tar.eid });
                    }
                    if (tar.ty === DataType.Network) {
                        idCollections.push({ et: EventDataType.reqStart, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqSucc, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqFail, eid: tar.u });
                    }
                }
                catch (err) {
                    D.error(err, r);
                }
            });
            // 抽取字段声明中覆盖到的元素id和网络请求id
            r.fs.forEach(function (f) {
                try {
                    var tar = f.fr;
                    if (tar.ty === DataType.Event) {
                        idCollections.push({ et: tar.et, eid: tar.eid });
                    }
                    if (tar.ty === DataType.Network) {
                        idCollections.push({ et: EventDataType.reqStart, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqSucc, eid: tar.u });
                        idCollections.push({ et: EventDataType.reqFail, eid: tar.u });
                    }
                }
                catch (err) {
                    D.error(err, r);
                }
            });
            // 以页面、事件类型两个维度，重新组织数据
            r.ps.forEach(function (p) {
                var _a;
                if (!rulesMap[p]) {
                    rulesMap[p] = {};
                }
                if (!rulesMap[p][r.et]) {
                    rulesMap[p][r.et] = {
                        ids: new Set(),
                        rules: new Map()
                    };
                }
                if (!rulesMap[p][r.et].rules.get(r.eid)) {
                    rulesMap[p][r.et].rules.set(r.eid, []);
                }
                (_a = rulesMap[p][r.et].rules.get(r.eid)) === null || _a === void 0 ? void 0 : _a.push(r);
                idCollections.forEach(function (kv) {
                    if (!kv.et || !kv.eid) {
                        return;
                    }
                    if (!rulesMap[p][kv.et]) {
                        rulesMap[p][kv.et] = {
                            ids: new Set(),
                            rules: new Map()
                        };
                    }
                    rulesMap[p][kv.et].ids.add(kv.eid);
                });
            });
        });
        return rulesMap;
    };
    return StatsComposer;
}());

var StatsLogger = /** @class */ (function () {
    function StatsLogger($platform, $config) {
        this.$platform = $platform;
        this.$config = $config;
    }
    StatsLogger.prototype.send = function (data) {
        if (this.$config.get().debug) {
            D.pushRecord(data);
        }
        this.$platform
            .sendLog({
            url: this.$config.get().logUrl,
            data: data
        })
            .then(function () { }, function () { });
        return data;
    };
    return StatsLogger;
}());

/**
 * sdk core 主类
 */
var StatsMain = /** @class */ (function () {
    function StatsMain(options, config) {
        /**
         * 配置服务
         */
        this.config = new StatsConfigService({
            debug: true,
            buildInTraking: true
        });
        if (options.platform) {
            this.platform = options.platform;
        }
        this.dataPoolManager = new StatsDataPoolManager(this.config);
        this.logger = new StatsLogger(this.platform, this.config);
        this.composer = new StatsComposer(this.platform, this.dataPoolManager, this.logger, this.config);
        this.config.set(config);
    }
    Object.defineProperty(StatsMain.prototype, "$composer", {
        /**
         * 获取处理器
         */
        get: function () {
            return this.composer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$dm", {
        /**
         * 获取数据管理器
         */
        get: function () {
            return this.dataPoolManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$platform", {
        /**
         * 获取平台实例
         */
        get: function () {
            return this.platform;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$logger", {
        /**
         * 获取日志服务
         */
        get: function () {
            return this.logger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsMain.prototype, "$config", {
        /**
         * 获取全局配置
         */
        get: function () {
            return this.config;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 初始化sdk core
     * @param cb success callback
     */
    StatsMain.prototype.init = function (cb) {
        var _this = this;
        var _a, _b, _c;
        // 获取初始化sdk以来的相关数据
        // 这些数据在某些平台是同步的，某些平台可能是异步的
        // 具体看平台实例的实现
        return Promise.all([
            (_a = this.$platform) === null || _a === void 0 ? void 0 : _a.getSystemInfo(),
            (_b = this.$platform) === null || _b === void 0 ? void 0 : _b.getNetworkInfo(),
            (_c = this.$platform) === null || _c === void 0 ? void 0 : _c.getCUID()
        ])
            .then(function (_a) {
            var system = _a[0], network = _a[1], cuid = _a[2];
            var _b, _c;
            _this.$dm.setGlobal({
                mc: system === null || system === void 0 ? void 0 : system.brand,
                sv: (_b = system === null || system === void 0 ? void 0 : system.system) === null || _b === void 0 ? void 0 : _b.split(' ')[1],
                s: system.screenWidth + "*" + system.screenHeight,
                fr: (_c = system === null || system === void 0 ? void 0 : system.system) === null || _c === void 0 ? void 0 : _c.split(' ')[0],
                l: network.networkType,
                i: cuid,
                av: system.browser
            });
            // 更新规则文件
            if (_this.config.get().zpID) {
                _this.$composer.update();
            }
            // sdk已经初始化，触发ready里存的callback
            statsReady.init();
            cb && cb();
        })
            .catch(function (e) {
            console.log('zs SDK init error');
        });
    };
    /**
     * 手动打点接口
     * @param name 点位名
     * @param params 点位业务参数
     */
    StatsMain.prototype.track = function (name, params) {
        this.$logger.send(__assign(__assign(__assign(__assign({}, this.$dm.$global), this.$dm.$common), { name: name }), params));
    };
    return StatsMain;
}());

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var sparkMd5 = createCommonjsModule(function (module, exports) {
(function (factory) {
    {
        // Node/CommonJS
        module.exports = factory();
    }
}(function (undefined$1) {

    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];

    function md5cycle(x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];

        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;

        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;

        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;

        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b  = (b << 21 | b >>> 11) + c | 0;

        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
    }

    function md5blk(s) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
    }

    function md5blk_array(a) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
    }

    function md51(s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
        }
        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);
        return state;
    }

    function md51_array(a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
        // containing the last element of the parent array if the sub array specified starts
        // beyond the length of the parent array - weird.
        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= a[i] << ((i % 4) << 3);
        }

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);

        return state;
    }

    function rhex(n) {
        var s = '',
            j;
        for (j = 0; j < 4; j += 1) {
            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
        }
        return s;
    }

    function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
            x[i] = rhex(x[i]);
        }
        return x.join('');
    }

    // In some cases the fast add32 function cannot be used..
    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') ;

    // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */

    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
        (function () {
            function clamp(val, length) {
                val = (val | 0) || 0;

                if (val < 0) {
                    return Math.max(val + length, 0);
                }

                return Math.min(val, length);
            }

            ArrayBuffer.prototype.slice = function (from, to) {
                var length = this.byteLength,
                    begin = clamp(from, length),
                    end = length,
                    num,
                    target,
                    targetArray,
                    sourceArray;

                if (to !== undefined$1) {
                    end = clamp(to, length);
                }

                if (begin > end) {
                    return new ArrayBuffer(0);
                }

                num = end - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);

                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);

                return target;
            };
        })();
    }

    // ---------------------------------------------------

    /**
     * Helpers.
     */

    function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        return str;
    }

    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length,
           buff = new ArrayBuffer(length),
           arr = new Uint8Array(buff),
           i;

        for (i = 0; i < length; i += 1) {
            arr[i] = str.charCodeAt(i);
        }

        return returnUInt8Array ? arr : buff;
    }

    function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
    }

    function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);

        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);

        return returnUInt8Array ? result : result.buffer;
    }

    function hexToBinaryString(hex) {
        var bytes = [],
            length = hex.length,
            x;

        for (x = 0; x < length - 1; x += 2) {
            bytes.push(parseInt(hex.substr(x, 2), 16));
        }

        return String.fromCharCode.apply(String, bytes);
    }

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */

    function SparkMD5() {
        // call reset to init the instance
        this.reset();
    }

    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
        // Converts the string to utf8 bytes if necessary
        // Then append as binary
        this.appendBinary(toUtf8(str));

        return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;

        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substring(i - 64);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
        this._buff = '';
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.prototype.getState = function () {
        return {
            buff: this._buff,
            length: this._length,
            hash: this._hash.slice()
        };
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.setState = function (state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
        delete this._hash;
        delete this._buff;
        delete this._length;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(this._hash, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
    };

    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} [raw] True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hash = function (str, raw) {
        // Converts the string to utf8 bytes if necessary
        // Then compute it using the binary function
        return SparkMD5.hashBinary(toUtf8(str), raw);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
        // call reset to init the instance
        this.reset();
    };

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
            length = buff.length,
            i;

        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }

        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff[i] << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.ArrayBuffer.prototype.getState = function () {
        var state = SparkMD5.prototype.getState.call(this);

        // Convert buffer to a string
        state.buff = arrayBuffer2Utf8Str(state.buff);

        return state;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
        // Convert string to buffer
        state.buff = utf8Str2ArrayBuffer(state.buff, true);

        return SparkMD5.prototype.setState.call(this, state);
    };

    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr)),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    return SparkMD5;
}));
});

var originRequest = wx.request;
var StatsPlatformMp = /** @class */ (function () {
    function StatsPlatformMp() {
        this.storePrefix = '__zs_';
        this.cuidStoreKey = 'cuid';
    }
    StatsPlatformMp.prototype.parseURL = function (url) {
        return parse(url);
    };
    StatsPlatformMp.prototype.getCUID = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.getStore('openid')) {
                resolve(_this.getStore('openid'));
                return;
            }
            if (_this.getStore(_this.cuidStoreKey)) {
                resolve(_this.getStore(_this.cuidStoreKey));
                return;
            }
            if (_this.systemInfo) {
                resolve(_this.cuid());
            }
            else {
                _this.getSystemInfo().then(function (info) {
                    resolve(_this.cuid());
                }, function () {
                    resolve(_this.cuid());
                });
            }
        });
    };
    StatsPlatformMp.prototype.cuid = function () {
        var factors = ['wechat', 'miniProgram', 'data-stats', '750', '1240'];
        if (this.systemInfo) {
            factors[3] = this.systemInfo.screenWidth;
            factors[4] = this.systemInfo.screenHeight;
        }
        factors = factors.concat([+new Date(), Math.random()]);
        var cuid = sparkMd5.hashBinary(factors.join('-')).substr(0, 32);
        this.setStore(this.cuidStoreKey, cuid);
        return cuid;
    };
    StatsPlatformMp.prototype.getNetworkInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var $this = _this;
            wx.getNetworkType({
                success: function (res) {
                    D.log('getNetworkInfo', res);
                    $this.networkInfo = res;
                    resolve(res);
                }
            });
        });
    };
    StatsPlatformMp.prototype.getSystemInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var $this = _this;
            wx.getSystemInfo({
                success: function (res) {
                    $this.systemInfo = res;
                    resolve(res);
                }
            });
        });
    };
    StatsPlatformMp.prototype.request = function (option) {
        return new Promise(function (resolve, reject) {
            option.success = function (res) {
                resolve(res);
            };
            option.fail = function (err) {
                reject(err);
            };
            originRequest(option);
        });
    };
    StatsPlatformMp.prototype.sendLog = function (option) {
        return new Promise(function (resolve, reject) {
            option.success = function (res) {
                resolve(res);
            };
            option.fail = function (err) {
                reject(err);
            };
            originRequest(option);
        });
    };
    StatsPlatformMp.prototype.setStore = function (key, value) {
        return wx.setStorageSync("" + this.storePrefix + key, value);
    };
    StatsPlatformMp.prototype.getStore = function (key) {
        return wx.getStorageSync("" + this.storePrefix + key);
    };
    StatsPlatformMp.prototype.getHitTargets = function (x, y, elements, ctx, target) {
        var _this = this;
        elements = elements.map(function (v) { return "#" + v; });
        return new Promise(function (resolve) {
            var targets = [];
            // 先判断target是否有id，如果有id就不做后续处理了
            if (target.id && elements.indexOf("#" + target.id) > -1) {
                resolve([target]);
                return;
            }
            Promise.all([
                _this.getViewportInfo(),
                Promise.all(elements.map(function (element, idx) {
                    return _this.getBoundingClientRect(element, ctx, true);
                }))
            ]).then(function (resp) {
                var viewport = resp[0];
                var scrollOffset = viewport.scrollOffset;
                var scrollTop = scrollOffset.scrollTop;
                var rectsArr = resp[1];
                rectsArr.forEach(function (rects) {
                    rects.forEach(function (rect) {
                        if (_this.isPointInTarget(x, y, rect, scrollTop)) {
                            targets.push(rect);
                        }
                    });
                });
                resolve(targets);
            });
        });
    };
    StatsPlatformMp.prototype.getVisibleTargets = function (elements) {
        var _this = this;
        elements = elements.map(function (v) { return "#" + v; });
        elements = elements.concat(elements.map(function (v) { return ".zyb-stats >>> " + v; }));
        return new Promise(function (resolve) {
            var targets = [];
            var unhit = [];
            _this.getViewportInfo().then(function (viewport) {
                var viewportRect = viewport.rect;
                Promise.all(elements.map(function (element, idx) {
                    return _this.getBoundingClientRect(element);
                })).then(function (rectsArr) {
                    rectsArr.forEach(function (rects) {
                        rects.forEach(function (rect) {
                            if (_this.isTargetInViewport(rect, viewportRect)) {
                                targets.push(rect);
                            }
                            else {
                                unhit.push(rect);
                            }
                        });
                    });
                    resolve({ hit: targets, unhit: unhit, list: rectsArr });
                }, function () {
                    // todo
                });
            }, function () {
                // todo
            });
        });
    };
    StatsPlatformMp.prototype.getBoundingClientRect = function (element, ctx, log) {
        return new Promise(function (reslove) {
            var query = wx.createSelectorQuery();
            if (ctx) {
                query = query.in(ctx);
            }
            query.selectAll(element).boundingClientRect();
            query.exec(function (res) {
                reslove(res[0].map(function (v, i) {
                    return __assign(__assign({}, v), { zsQueryIndex: i });
                }));
            });
        });
    };
    StatsPlatformMp.prototype.getViewportInfo = function () {
        return new Promise(function (reslove) {
            var query = wx.createSelectorQuery();
            query.selectViewport().boundingClientRect();
            query.selectViewport().scrollOffset();
            query.exec(function (res) {
                reslove({ rect: res[0], scrollOffset: res[1] });
            });
        });
    };
    StatsPlatformMp.prototype.isPointInTarget = function (x, y, rect, scrollTop) {
        if (!rect)
            return false;
        var left = rect.left, right = rect.right, top = rect.top, height = rect.height;
        if (left < x && x < right && scrollTop + top < y && y < scrollTop + top + height) {
            return true;
        }
        return false;
    };
    StatsPlatformMp.prototype.isTargetInViewport = function (rect, viewportRect) {
        if (!rect || !viewportRect)
            return false;
        var left = rect.left, top = rect.top, right = rect.right, bottom = rect.bottom, width = rect.width, height = rect.height;
        var vh = viewportRect.height;
        var vw = viewportRect.width;
        // console.log(vh, vw, left, top, right, bottom, width, height)
        // 任意像素展现即认为展现
        // todo 判断条件不够严谨
        // 1. 不判断元素本身的宽高是否为零，因为存在父容器无宽高的情况 
        if (((left >= 0 && left < vw) || (left < 0 && left + width > 0)) &&
            ((top >= 0 && top < vh) || (top < 0 && top + height > 0))) {
            return true;
        }
        return false;
    };
    return StatsPlatformMp;
}());

var version = require('../package.json').version;
// related to dist dir

var originApp = App;
var originPage = Page;
var originComponent = Component;
var originRequest$1 = wx.request;
var ErrCPDoNotExist = '$cp do not exist.';
var StatsAppFactoryWX = /** @class */ (function () {
    function StatsAppFactoryWX($sm) {
        this.$sm = $sm;
    }
    /**
     * override wx Functions
     */
    StatsAppFactoryWX.prototype.init = function () {
        App = this.App;
        Page = this.Page;
        Component = this.Component;
        Object.defineProperty(wx, 'request', {
            writable: true
        });
        wx.request = this.Request;
    };
    Object.defineProperty(StatsAppFactoryWX.prototype, "App", {
        get: function () {
            var _this = this;
            return function (option) {
                var appInstance = new StatsAppWX(_this.$sm, option);
                appInstance.init();
                _this.appInstance = appInstance;
                return originApp(appInstance.option);
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppFactoryWX.prototype, "Page", {
        get: function () {
            var _this = this;
            return function (option) {
                var pageInstance = new StatsPageWX(_this.$sm, _this.appInstance, option);
                pageInstance.init();
                return originPage(pageInstance.option);
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppFactoryWX.prototype, "Component", {
        get: function () {
            var _this = this;
            return function (option) {
                var componentInstance = new StatsComponentWX(_this.$sm, _this.appInstance, option);
                componentInstance.init();
                return originComponent(componentInstance.option);
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppFactoryWX.prototype, "Request", {
        get: function () {
            var _this = this;
            return function (option) {
                var _a, _b, _c, _d, _e;
                var $sm = _this.$sm;
                var modifiedOption = __assign({}, option);
                var urlInfo = (_a = _this.$sm.$platform) === null || _a === void 0 ? void 0 : _a.parseURL(modifiedOption.url);
                var pathname = urlInfo.pathname;
                var $cp = (_c = (_b = _this.appInstance) === null || _b === void 0 ? void 0 : _b.currentPageInstance) === null || _c === void 0 ? void 0 : _c.$cp;
                var pid = ((_e = (_d = _this.appInstance) === null || _d === void 0 ? void 0 : _d.currentPageInstance) === null || _e === void 0 ? void 0 : _e.pid) || '';
                var reqStartEventData = {
                    ty: EventDataType.reqStart,
                    id: pathname,
                    pid: pid,
                    t: +new Date()
                };
                var networkData = {
                    uri: pathname,
                    st: +new Date(),
                    req: modifiedOption.data,
                    et: -1,
                    res: {}
                };
                try {
                    if ($cp) {
                        $sm.$dm.setData(DataType.Event, reqStartEventData, $cp);
                        $sm.$dm.setData(DataType.Network, networkData, $cp);
                        $sm.$composer.compose(reqStartEventData, $cp);
                    }
                }
                catch (err) {
                    D.log(err);
                }
                modifiedOption.success = function (res) {
                    try {
                        var reqSuccEventData = {
                            ty: EventDataType.reqSucc,
                            id: pathname,
                            pid: pid,
                            t: +new Date()
                        };
                        // todo 是否需要请求头等信息呢？
                        // update networkData by refer
                        networkData.res = res.data;
                        // update succ event after networkData set
                        if ($cp) {
                            $sm.$dm.setData(DataType.Event, reqSuccEventData, $cp);
                            $sm.$composer.compose(reqSuccEventData, $cp);
                        }
                    }
                    catch (err) {
                        D.log(err);
                    }
                    if (option.success) {
                        option.success.call(this, res);
                    }
                };
                modifiedOption.fail = function (res) {
                    try {
                        var reqFailEventData = {
                            ty: EventDataType.reqFail,
                            id: pathname,
                            pid: pid,
                            t: +new Date()
                        };
                        if ($cp) {
                            $sm.$dm.setData(DataType.Event, reqFailEventData, $cp);
                            $sm.$composer.compose(reqFailEventData, $cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                    }
                    catch (err) {
                        D.log(err);
                    }
                    if (option.success) {
                        option.success.call(this, res);
                    }
                };
                if (option.url.indexOf('.gif') !== -1) {
                    return originRequest$1(option);
                }
                // this.log('Modified Request Exec: ')
                // this.log(option, modifiedOption)
                return originRequest$1(modifiedOption);
            };
        },
        enumerable: true,
        configurable: true
    });
    return StatsAppFactoryWX;
}());
var StatsAppWX = /** @class */ (function () {
    function StatsAppWX($sm, originOption) {
        this.$sm = $sm;
        this.originOption = originOption;
        this.modifiedOption = __assign({}, this.originOption);
    }
    StatsAppWX.prototype.init = function () {
        this.originHooks = __assign({}, this.option);
        this.modifiedHooks = __assign({}, this.originHooks);
        this.modifiedHooks.onLaunch = this.onLaunch;
        this.modifiedHooks.onShow = this.onShow;
        this.modifiedHooks.onHide = this.onHide;
        this.modifiedOption = __assign(__assign({}, this.modifiedOption), this.modifiedHooks);
    };
    Object.defineProperty(StatsAppWX.prototype, "option", {
        get: function () {
            return this.modifiedOption;
        },
        enumerable: true,
        configurable: true
    });
    StatsAppWX.prototype.setCurrentPage = function (pi) {
        this.currentPageInstance = pi;
    };
    Object.defineProperty(StatsAppWX.prototype, "onLaunch", {
        /**
         * 小程序启动事件
         */
        get: function () {
            if (this._onLaunch) {
                return this._onLaunch;
            }
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onLaunch = function (inputs) {
                try {
                    $sm.$composer.composeBuiltin({
                        name: BuiltInName.AppLaunch,
                        pageUUID: inputs.path,
                        scene: inputs.scene || ''
                    });
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onLaunch) {
                    $originHooks.onLaunch.call(this, inputs);
                }
                D.log('安装小程序（onLaunch）');
            };
            this._onLaunch = onLaunch;
            return this._onLaunch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppWX.prototype, "onShow", {
        /**
         * 小程序整体的show事件
         */
        get: function () {
            if (this._onShow) {
                return this._onShow;
            }
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onShow = function (inputs) {
                try {
                    $sm.$composer.composeBuiltin({
                        name: BuiltInName.AppShow,
                        pageUUID: inputs.path,
                        scene: inputs.scene || ''
                    });
                    $this.startTime = +new Date;
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onShow) {
                    $originHooks.onShow.call(this, inputs);
                }
                D.log('小程序展现（onShow）');
            };
            this._onShow = onShow;
            return this._onShow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsAppWX.prototype, "onHide", {
        /**
         * 小程序进入后台事件
         */
        get: function () {
            if (this._onHide) {
                return this._onHide;
            }
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onHide = function (inputs) {
                var _a;
                try {
                    var pages = getCurrentPages();
                    var route = (_a = pages[pages.length - 1]) === null || _a === void 0 ? void 0 : _a.route;
                    // @ts-ignore
                    var eventDuration = parseInt((+new Date - $this.startTime) / 1000);
                    $sm.$composer.composeBuiltin({
                        name: BuiltInName.AppHide,
                        pageUUID: route,
                        event_duration: eventDuration || 1
                    });
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onHide) {
                    $originHooks.onHide.call(this, inputs);
                }
                D.log('小程序展现（onHide）');
            };
            this._onHide = onHide;
            return this._onHide;
        },
        enumerable: true,
        configurable: true
    });
    return StatsAppWX;
}());
var TargetVisionStatus;
(function (TargetVisionStatus) {
    TargetVisionStatus[TargetVisionStatus["Show"] = 0] = "Show";
    TargetVisionStatus[TargetVisionStatus["Hide"] = 1] = "Hide";
})(TargetVisionStatus || (TargetVisionStatus = {}));
var StatsComponentWX = /** @class */ (function () {
    function StatsComponentWX($sm, appInstance, option) {
        this.$sm = $sm;
        this.appInstance = appInstance;
        this.isAlive = false;
        this.isActivated = false;
        this.visionCheckTimerID = null;
        this.visionCheckTimeout = 250;
        this.visionCache = {};
        this.originOption = __assign({}, option);
        this.modifiedOption = __assign({}, this.originOption);
    }
    Object.defineProperty(StatsComponentWX.prototype, "pid", {
        get: function () {
            var _a;
            return ((_a = this.$cp) === null || _a === void 0 ? void 0 : _a.pid) || '';
        },
        enumerable: true,
        configurable: true
    });
    StatsComponentWX.prototype.init = function () {
        this.originHooks = __assign({}, this.option.methods);
        this.modifiedHooks = __assign({}, this.originHooks);
        this.modifiedHooks.onLoad = this.onLoad;
        this.modifiedHooks.onShow = this.onShow;
        this.modifiedHooks.onHide = this.onHide;
        this.modifiedHooks.onUnload = this.onUnload;
        this.modifiedHooks.onShareAppMessage = this.onShareAppMessage;
        // uni-app 式的事件统一代理
        if (this.originHooks.__e) {
            var $this_1 = this;
            this.modifiedHooks.__e = function (event) {
                this.$vm.zsTracker = $this_1.eventHandler.bind(this, event);
                $this_1.originHooks.__e.call(this, event);
            };
        }
        this.modifiedOption = __assign(__assign({}, this.modifiedOption), { data: __assign(__assign({}, this.modifiedOption.data), { zsTracker: this.eventHandler }), methods: this.modifiedHooks });
    };
    StatsComponentWX.prototype.start = function (cp) {
        this.$cp = cp;
        this.isAlive = true;
        this.isActivated = true;
        this.activate();
    };
    StatsComponentWX.prototype.destroy = function () {
        this.inactivate();
        this.$cp = undefined;
        this.isAlive = false;
    };
    StatsComponentWX.prototype.activate = function () {
        var _a;
        this.isActivated = true;
        (_a = this.appInstance) === null || _a === void 0 ? void 0 : _a.setCurrentPage(this);
        this.visionCheck();
    };
    StatsComponentWX.prototype.inactivate = function () {
        var _a;
        for (var key in this.visionCache) {
            if (this.visionCache.hasOwnProperty(key)) {
                var item = this.visionCache[key];
                if ((item === null || item === void 0 ? void 0 : item.status) === TargetVisionStatus.Show) {
                    var target = item.target;
                    // D.log('真实展现（hide）', target)
                    var eventData = {
                        ty: EventDataType.viewHide,
                        id: target.id,
                        pid: this.pid,
                        t: +new Date(),
                        ext: __assign({}, target.dataset)
                    };
                    if (this.$cp) {
                        this.$sm.$dm.setData(DataType.Event, eventData, this.$cp);
                        this.$sm.$composer.compose(eventData, this.$cp);
                    }
                    else {
                        throw new Error(ErrCPDoNotExist);
                    }
                }
            }
        }
        this.visionCache = {};
        this.isActivated = false;
        this.clearVisionCheckTimer();
        (_a = this.appInstance) === null || _a === void 0 ? void 0 : _a.setCurrentPage();
    };
    StatsComponentWX.prototype.clearVisionCheckTimer = function () {
        if (this.visionCheckTimerID !== null) {
            clearTimeout(this.visionCheckTimerID);
        }
    };
    Object.defineProperty(StatsComponentWX.prototype, "visionCheck", {
        get: function () {
            if (this._visionCheck)
                return this._visionCheck;
            var $this = this;
            var $sm = this.$sm;
            var check = function () {
                var _a, _b, _c;
                // 获取在zs sdk page生命周期中的当前page
                var $page = $this.appInstance.currentPageInstance;
                if (!$page) {
                    return;
                }
                var $cp = $page.$cp;
                var pid = (_a = $this.$cp) === null || _a === void 0 ? void 0 : _a.pid;
                var pages = getCurrentPages();
                var route = (_b = pages[pages.length - 1]) === null || _b === void 0 ? void 0 : _b.route;
                // D.log('真实展现（debug）', pid, route)
                // D.log('真实展现（debug）', $this.visionCache)
                if (pid && pid === route && $this.isActivated) {
                    var suspects = Array.from(new Set($sm.$composer
                        .getSuspecteds(pid, EventDataType.viewShow)
                        .concat($sm.$composer.getSuspecteds(pid, EventDataType.viewHide))));
                    (_c = $sm.$platform) === null || _c === void 0 ? void 0 : _c.getVisibleTargets(suspects).then(function (_a) {
                        var hit = _a.hit, unhit = _a.unhit;
                        // getVisibleTargets 是异步操作，在回调里需要再次判断页面当前是否active
                        // 否则会在离开页面之后也触发viewShow的判定
                        if (!$this.isActivated) {
                            return;
                        }
                        hit.forEach(function (target) {
                            var targetInCache = $this.visionCache[target.id + "-" + target.zsQueryIndex];
                            if (targetInCache === undefined || targetInCache.status !== TargetVisionStatus.Show) {
                                var eventData = {
                                    ty: EventDataType.viewShow,
                                    id: target.id,
                                    pid: pid,
                                    t: +new Date(),
                                    ext: __assign({}, target.dataset)
                                };
                                if ($cp) {
                                    $sm.$dm.setData(DataType.Event, eventData, $cp);
                                    $sm.$composer.compose(eventData, $cp);
                                }
                                else {
                                    throw new Error(ErrCPDoNotExist);
                                }
                                $this.visionCache[target.id + "-" + target.zsQueryIndex] = {
                                    target: target,
                                    status: TargetVisionStatus.Show
                                };
                            }
                        });
                        unhit.forEach(function (target) {
                            var targetInCache = $this.visionCache[target.id + "-" + target.zsQueryIndex];
                            if ((targetInCache === null || targetInCache === void 0 ? void 0 : targetInCache.status) === TargetVisionStatus.Show) {
                                // D.log('真实展现（hide）', target)
                                var eventData = {
                                    ty: EventDataType.viewHide,
                                    id: target.id,
                                    pid: pid,
                                    t: +new Date(),
                                    ext: __assign({}, target.dataset)
                                };
                                if ($cp) {
                                    $sm.$dm.setData(DataType.Event, eventData, $cp);
                                    $sm.$composer.compose(eventData, $cp);
                                }
                                else {
                                    throw new Error(ErrCPDoNotExist);
                                }
                                $this.visionCache[target.id + "-" + target.zsQueryIndex] = {
                                    target: target,
                                    status: TargetVisionStatus.Hide
                                };
                            }
                        });
                    });
                }
                else {
                    D.log('异步的隐藏判断，上下文丢失了，用缓存上下文操作');
                }
                $this.visionCheckTimerID = setTimeout(check, $this.visionCheckTimeout);
            };
            var visionCheck = function () {
                $this.clearVisionCheckTimer();
                check();
            };
            this._visionCheck = visionCheck;
            return visionCheck;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onLoad", {
        get: function () {
            if (this._onLoad)
                return this._onLoad;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onLoad = function (inputs) {
                try {
                    if (!$this.isActivated) {
                        var cp = $this.$sm.$dm.appendDataPage(this.route);
                        $sm.$dm.setData(DataType.Context, inputs, cp);
                        $this.startTime = +new Date;
                        $sm.$composer.composeBuiltin({
                            name: BuiltInName.PageShow
                        }, cp);
                        $this.start(cp);
                    }
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onLoad) {
                    $originHooks.onLoad.call(this, inputs);
                }
                D.log('页面进入（onLoad）', this.route);
            };
            this._onLoad = onLoad;
            return onLoad;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onShow", {
        get: function () {
            if (this._onShow)
                return this._onShow;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onShow = function (inputs) {
                try {
                    if (!$this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            $sm.$dm.setData(DataType.Context, inputs, $this.$cp);
                            $this.startTime = +new Date;
                            $sm.$composer.composeBuiltin({
                                name: BuiltInName.PageShow
                            }, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                        $this.activate();
                    }
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onShow) {
                    $originHooks.onShow.call(this, inputs);
                }
                D.log('页面进入（onShow）', this.route);
            };
            this._onShow = onShow;
            return onShow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onHide", {
        get: function () {
            if (this._onHide)
                return this._onHide;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onHide = function (inputs) {
                try {
                    if ($this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            // @ts-ignore
                            var eventDuration = parseInt((+new Date - $this.startTime) / 1000);
                            $sm.$dm.setData(DataType.Context, inputs, $this.$cp);
                            $sm.$composer.composeBuiltin({
                                name: BuiltInName.PageHide,
                                event_duration: eventDuration || 1
                            }, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                        $this.inactivate();
                    }
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onHide) {
                    $originHooks.onHide.call(this, inputs);
                }
                D.log('页面离开（onHide）', this.route);
            };
            this._onHide = onHide;
            return onHide;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onUnload", {
        get: function () {
            if (this._onUnload)
                return this._onUnload;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onUnload = function (inputs) {
                try {
                    if ($this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            // @ts-ignore
                            var eventDuration = parseInt((+new Date - $this.startTime) / 1000);
                            $sm.$dm.setData(DataType.Context, inputs, $this.$cp);
                            $sm.$composer.composeBuiltin({
                                name: BuiltInName.PageHide,
                                event_duration: eventDuration || 1
                            }, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                    }
                    $this.destroy();
                }
                catch (err) {
                    D.error(err);
                }
                if ($originHooks.onUnload) {
                    $originHooks.onUnload.call(this, inputs);
                }
                D.log('页面离开（onUnload）', this.route);
            };
            this._onUnload = onUnload;
            return onUnload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "onShareAppMessage", {
        get: function () {
            if (this._onShareAppMessage)
                return this._onShareAppMessage;
            var $this = this;
            var $sm = this.$sm;
            var $originHooks = this.originHooks;
            var onShareAppMessage = function (inputs) {
                try {
                    if ($this.isActivated && $this.isAlive) {
                        if ($this.$cp) {
                            var shareEventData = {
                                ty: EventDataType.share,
                                pid: this.route,
                                id: "$share",
                                t: +new Date()
                            };
                            $sm.$dm.setData(DataType.Event, shareEventData, $this.$cp);
                            $sm.$composer.compose(shareEventData, $this.$cp);
                        }
                        else {
                            throw new Error(ErrCPDoNotExist);
                        }
                        $this.activate();
                    }
                }
                catch (err) {
                    D.error(err);
                }
                var resultValue = {};
                if ($originHooks.onShareAppMessage) {
                    resultValue = $originHooks.onShareAppMessage.call(this, inputs);
                }
                D.log('触发分享', this.route);
                return resultValue;
            };
            this._onShareAppMessage = onShareAppMessage;
            return onShareAppMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "eventHandler", {
        get: function () {
            if (this._eventHandler)
                return this._eventHandler;
            var $this = this;
            var $sm = this.$sm;
            var eventHandler = function (event) {
                var _a, _b;
                try {
                    var $page_1 = $this.appInstance.currentPageInstance;
                    if (!$page_1) {
                        return;
                    }
                    var pid_1 = ((_a = $page_1.$cp) === null || _a === void 0 ? void 0 : _a.pid) || '';
                    var target = event.target, type = event.type, detail = event.detail;
                    var x = detail.x, y = detail.y;
                    var innerType = type;
                    switch (type) {
                        case 'tap':
                            innerType = EventDataType.click;
                            break;
                        default:
                            break;
                    }
                    if (type === 'tap') {
                        var suspects = $sm.$composer.getSuspecteds(pid_1, innerType);
                        var ctx = this;
                        (_b = $sm.$platform) === null || _b === void 0 ? void 0 : _b.getHitTargets(x, y, suspects, ctx, target).then(function (targets) {
                            targets.forEach(function (target) {
                                var ext = __assign({}, target.dataset);
                                try {
                                    if (ext.zsIdx !== undefined && ext.zsList !== undefined) {
                                        ext.zsItem = ext.zsList[ext.zsIdx] || {};
                                    }
                                }
                                catch (e) {
                                    D.log(e);
                                }
                                var eventData = {
                                    ty: EventDataType.click,
                                    id: target.id,
                                    pid: pid_1,
                                    t: +new Date(),
                                    ext: ext
                                };
                                if ($page_1.$cp) {
                                    $sm.$dm.setData(DataType.Event, eventData, $page_1.$cp);
                                    $sm.$composer.compose(eventData, $page_1.$cp);
                                }
                                else {
                                    throw new Error(ErrCPDoNotExist);
                                }
                            });
                        });
                    }
                    if (type === 'longpress') {
                        wx.setClipboardData({
                            data: $sm.$dm.$global.i,
                            success: function () {
                                wx.getClipboardData({
                                    success: function (res) {
                                        console.log('复制：', res.data); // data
                                    }
                                });
                            }
                        });
                    }
                }
                catch (err) {
                    D.error(err);
                }
            };
            this._eventHandler = eventHandler;
            return eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsComponentWX.prototype, "option", {
        get: function () {
            return this.modifiedOption;
        },
        enumerable: true,
        configurable: true
    });
    return StatsComponentWX;
}());
var StatsPageWX = /** @class */ (function (_super) {
    __extends(StatsPageWX, _super);
    function StatsPageWX() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StatsPageWX.prototype.init = function () {
        this.originHooks = __assign({}, this.option);
        this.modifiedHooks = __assign({}, this.originHooks);
        this.modifiedHooks.onLoad = this.onLoad;
        this.modifiedHooks.onShow = this.onShow;
        this.modifiedHooks.onHide = this.onHide;
        this.modifiedHooks.onUnload = this.onUnload;
        this.modifiedHooks.onShareAppMessage = this.onShareAppMessage;
        this.modifiedOption = __assign(__assign({}, this.modifiedOption), this.modifiedHooks);
    };
    return StatsPageWX;
}(StatsComponentWX));

/// <reference path="../../typings/mp/index.d.ts" />
var sdkVersion = version;
var logUrlDev = 'https://nlogtj.zuoyebang.cc/nlogtj/xiaochengxu_test';
var logUrlProd = 'https://nlogtj.zuoyebang.cc/nlogtj/xiaochengxu';
var ZybStatsWX = /** @class */ (function () {
    function ZybStatsWX() {
        this.cfg = {};
        this.sm = new StatsMain({ platform: new StatsPlatformMp() }, this.cfg);
        var appFactory = new StatsAppFactoryWX(this.sm);
        appFactory.init();
    }
    /**
     * 更新配置
     * @param config
     */
    ZybStatsWX.prototype.config = function (config) {
        // 小程序的上报地址控制收敛到小程序sdk入口这儿
        if (!config.logUrl) {
            switch (config.env) {
                case Env.Dev:
                    config.logUrl = logUrlDev;
                    break;
                case Env.Prod:
                    config.logUrl = logUrlProd;
                    break;
                default:
                    config.logUrl = logUrlProd;
                    break;
            }
        }
        this.cfg = __assign(__assign({}, this.cfg), config);
        this.sm.$config.set(config);
        this.sm.$dm.setGlobal({ plat: this.cfg.plat, zpID: this.cfg.zpID, sdkVersion: sdkVersion });
    };
    /**
     * 设置、更新全局变量
     * @param params
     */
    ZybStatsWX.prototype.global = function (params) {
        this.sm.$dm.setGlobal(params);
    };
    /**
     * 设置openid
     * @param openid
     */
    ZybStatsWX.prototype.setOpenid = function (openid, updateStore) {
        if (updateStore === void 0) { updateStore = true; }
        var _a;
        this.global({ i: openid });
        if (updateStore) {
            (_a = this.sm.$platform) === null || _a === void 0 ? void 0 : _a.setStore('openid', openid);
        }
    };
    /**
     * 设置unionid
     * @param unionid
     */
    ZybStatsWX.prototype.setUnionid = function (unionid, updateStore) {
        if (updateStore === void 0) { updateStore = true; }
        var _a;
        this.global({ mp_unionid: unionid });
        if (updateStore) {
            (_a = this.sm.$platform) === null || _a === void 0 ? void 0 : _a.setStore('unionid', unionid);
        }
    };
    ZybStatsWX.prototype.setAppid = function (appid, updateStore) {
        this.global({ mp_appid: appid });
    };
    /**
     * 设置登陆用户id（作业帮用户id，加密）
     * @param wxuid
     */
    ZybStatsWX.prototype.login = function (wxuid, updateStore) {
        if (wxuid === void 0) { wxuid = '-1'; }
        if (updateStore === void 0) { updateStore = true; }
        var _a;
        this.global({ paid: wxuid });
        if (updateStore) {
            (_a = this.sm.$platform) === null || _a === void 0 ? void 0 : _a.setStore('wxuid', wxuid);
        }
    };
    /**
     * 初始化
     */
    ZybStatsWX.prototype.init = function () {
        // 挂载到wx上
        wx.__zs = this;
        wx.zs = this;
        wx.zsd = D;
        D.log('全埋点SDK初始化');
        this.sm.init();
        var platform = this.sm.$platform;
        var openid = platform.getStore('openid');
        var unionid = platform.getStore('unionid');
        var wxuid = platform.getStore('wxuid');
        if (openid) {
            this.setOpenid(openid, false);
        }
        if (unionid) {
            this.setUnionid(unionid, false);
        }
        if (wxuid) {
            this.login(wxuid, false);
        }
    };
    /**
     * 主动埋点方法
     * @param name 点位名字
     * @param params 点位参数
     */
    ZybStatsWX.prototype.track = function (name, params) {
        return this.sm.track(name, params);
    };
    /**
     * 获取cuid
     */
    ZybStatsWX.prototype.getCuid = function () {
        var _a;
        return (_a = this.sm.$platform) === null || _a === void 0 ? void 0 : _a.getCUID();
    };
    return ZybStatsWX;
}());
var zs = new ZybStatsWX();

export { zs };
//# sourceMappingURL=stats.es5.js.map
