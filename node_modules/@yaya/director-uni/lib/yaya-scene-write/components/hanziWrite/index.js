import HandWriterCore from './hanziWriteCore/HanziWriter'
import RenderTarget from './hanziWritePatch/RenderTarget'
import { removeEmptyKeys } from './hanziWritePatch/utils'

export default class HanziWriterContext {
  /**
   *Creates an instance of HanziWriterContext.
   * @param {any} ele vue ref节点
   * @param {import('./index').options}  options
   * @memberof HanziWriterContext
   */
  constructor(ele, options) {
    if (!ele) {
      throw new Error('parameter ele are required');
    }
    this._options = options
    this.comp = ele;
    if (!this.comp) {
      throw new Error(`hanzi-writer-view with id ${id} not found`);
    }
    const { character } = options
    this.isDestroyed = false;
    options.width = this.comp.width
    options.height = this.comp.height
    options.renderer = 'canvas'
    options.rendererOverride = { createRenderTarget: RenderTarget.init }

    this.writer = new HandWriterCore(this.comp, removeEmptyKeys(options));

    if (character) {
      this.setCharacter(character);
    }
    this.comp.connectContext(this);
  }

  _ensureNotDestroyed() {
    if (this.isDestroyed) throw new Error('This context has already been destroyed');
  }

  showCharacter(options = {}) {
    this._ensureNotDestroyed();
    return this.writer.showCharacter(options);
  }

  hideCharacter(options = {}) {
    this._ensureNotDestroyed();
    return this.writer.hideCharacter(options);
  }

  animateCharacter(options = {}) {
    this._ensureNotDestroyed();
    return this.writer.animateCharacter(options);
  }

  animateStroke(strokeNum, options = {}) {
    this._ensureNotDestroyed();
    return this.writer.animateStroke(strokeNum, options);
  }

  loopCharacterAnimation(options = {}) {
    this._ensureNotDestroyed();
    return this.writer.loopCharacterAnimation(options);
  }

  showOutline(options = {}) {
    this._ensureNotDestroyed();
    return this.writer.showOutline(options);
  }

  hideOutline(options = {}) {
    this._ensureNotDestroyed();
    return this.writer.hideOutline(options);
  }

  updateColor(colorName, colorVal, options = {}) {
    this._ensureNotDestroyed();
    return this.writer.updateColor(colorName, colorVal, options);
  }
  /**
   *
   *
   * @param {import('./index').quizOptions} [quizOptions={}]
   * @returns
   * @memberof HanziWriterContext
   */
  quiz(quizOptions = {}) {
    this._ensureNotDestroyed();
    return this.writer.quiz(quizOptions);
  }

  cancelQuiz() {
    this._ensureNotDestroyed();
    return this.writer.cancelQuiz();
  }

  syncUserStroke(points) {
    this._ensureNotDestroyed();
    return this.writer.syncUserStroke(points);
  }

  setCharacter(character) {
    this._ensureNotDestroyed();
    return this.writer.setCharacter(character);
  }

  transformAxios(point) {
    return this.writer.transformAxios(point)
  }

  convertExternalPoint(point) {
    return this.writer.convertExternalPoint(point)
  }

  trigger(evtName, evt) {
    this.writer.target.trigger(evtName, evt);
  }

  // highlight 相关
  highlightStroke(stroke) {
    this.writer._quiz.highlightStroke(stroke)
  }
  highlightCompleteChar() {
    this.writer._quiz.highlightCompleteChar()
  }
  

  destroy() {
    if (this.isDestroyed) return;
    this.comp.disconnectContext();
    this.writer.target.removeAllListeners();
    this.writer.cancelQuiz();
    this.writer.hideCharacter();
    this.writer.hideOutline();
    this.isDestroyed = true;
  }
}
