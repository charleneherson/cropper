import { EventEmitter } from "./utils";
import { eventify, polyfillCanvasCtx } from "./utils";

// canvas封装对象，把uni的canvas封装为hanziWriter可操作的
export default class RenderTarget {
  constructor(view) {
    this.view = view;
    this.eventEmitter = new EventEmitter();
    if (!view.ctx) throw Error("请先挂载canvas实例到节点上");
    this.ctx = view.ctx;
    this.canvasInstance = view.canvasInstance;
    const dpr = wx.getSystemInfoSync().pixelRatio;
    this.canvasInstance.height = view.height * dpr;
    this.canvasInstance.width = view.width * dpr;
    this.ctx.scale(dpr, dpr);
  }

  addPointerStartListener(callback) {
    this.eventEmitter.addListener("pointerStart", callback);
  }

  addPointerMoveListener(callback) {
    this.eventEmitter.addListener("pointerMove", callback);
  }

  addPointerEndListener(callback) {
    this.eventEmitter.addListener("pointerEnd", callback);
  }

  trigger(eventName, evt) {
    this._getClientBoundingRect().then((rect) => {
      this.eventEmitter.trigger(eventName, eventify(evt, rect));
    });
  }

  removeAllListeners() {
    return this.eventEmitter.removeAllListeners();
  }

  getContext() {
    return this.ctx;
  }

  _getClientBoundingRect() {
    return new Promise((resolve) => {
      this.view
        .createSelectorQuery()
        .select("#writer-canvas")
        .boundingClientRect(resolve)
        .exec();
    });
  }
}

RenderTarget.init = (initData) => new RenderTarget(initData);
