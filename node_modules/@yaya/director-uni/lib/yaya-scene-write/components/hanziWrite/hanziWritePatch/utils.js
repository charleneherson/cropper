// 轻量eventBus
export class EventEmitter {
  constructor() {
    this._listeners = {};
  }

  addListener(name, callback) {
    if (!this._listeners[name]) this._listeners[name] = [];
    this._listeners[name].push(callback);
  }

  trigger(name, evt) {
    if (this._listeners[name]) {
      this._listeners[name].forEach(listener => listener(evt));
    }
  }

  removeAllListeners() {
    this._listeners = {};
  }
}

// 微信canvas垫片
export const polyfillCanvasCtx = (ctx) => {
  // need to polyfill missing setters from the wechat context...
  [
    'globalAlpha',
    'strokeStyle',
    'fillStyle',
    'lineWidth',
    'lineCap',
    'lineJoin',
  ].forEach(setter => {
    const setterMethod = `set${setter[0].toUpperCase()}${setter.slice(1)}`;
    Object.defineProperty(ctx, setter, { set: ctx[setterMethod].bind(ctx) });
  });
  return ctx;
};

// event转换，转换event坐标为相对canvas坐标，以供hanziWriter操作
export const eventify = (evt, boundingRect) => {
  const getPoint = () => {
    const x = evt.touches[0].clientX - boundingRect.left;
    const y = evt.touches[0].clientY - boundingRect.top;
    return { x, y };
  };

  return { preventDefault: () => { }, getPoint };
};

// 去除对象的空键值
export const removeEmptyKeys = (obj) => {
  const newObj = {};
  Object.keys(obj).forEach((key) => {
    const val = obj[key];
    if (val !== undefined && val !== null) {
      newObj[key] = val;
    }
  });
  return newObj;
};
