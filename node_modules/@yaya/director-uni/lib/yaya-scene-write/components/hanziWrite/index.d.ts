export default class HanziWriter {
  constructor(element: any, options: options);
  showCharacter(options: any): void;

  hideCharacter(options): void;

  animateCharacter(options): void;

  animateStroke(strokeNum: number, options): void;

  loopCharacterAnimation(options): void;

  showOutline(options): void;

  hideOutline(options): void;

  updateColor(colorName, colorVal, options): void;

  /**开始测验 */
  quiz(quizOptions: quizOptions): void;
  /**取消测验 */
  cancelQuiz(): void;

  setCharacter(character): void;

  /**转换画布内点坐标  从画布汉字参考系到画布外标准参考系 */
  transformAxios(point: { x: string; y: string }): { x: string; y: string };

  /**转换点坐标  从画布外标准参考系到画布汉字参考系，transformAxios的反向方法*/
  convertExternalPoint(point: {
    x: string;
    y: string;
  }): { x: string; y: string };

  /**高亮传入笔划 */
  highlightStroke(stroke: any): void;
  /**高亮整个字 */
  highlightCompleteChar(): void;

  trigger(evtName, evt): void;
}

export interface quizOptions {
  /**用户每次点击画布，开始绘制时调用**/
  onStartUserStroke(data: onChangeStrokeData): void;
  /** 画布初始化完毕，测试开始时，调用*/
  onStartStroke(data: onChangeStrokeData): void;
  /**测验完成后调用。 使用包含 totalMistakes 的对象调用该函数，该对象是测验期间发生的总错误 */
  onComplete(data: onCompleteStrokeData): void;
  /**当用户正确绘制笔划时调用 */
  onCorrectStroke(data: onChangeStrokeData): void;
  /** 当用户绘制笔划时出错 */
  onMistake(data: onChangeStrokeData): void;
  showHintAfterMisses: number;
  /**默认值：1，取值范围(0,1] 值越大，校验越宽松 */
  leniency: number;
  /** 布尔值, 默认 true。 控制当用户完成绘制整个角色时，测验是否会短暂突出显示角色。 这也可以在创建编写器实例时设置 */
  highlightOnComplete: boolean;
}

interface onCompleteStrokeData {
  /**用户笔迹数据，这里是个对象，且坐标系未转换，如果需要数组形式，对顺序有要求，在onCorrectStroke，自行处理 */
  userStrokes: any;
  /**当前字的笔划数据 */
  characterStrokes: any;
  /**犯的所有错误 */
  totalMistakes: number;
}

interface onChangeStrokeData {
  /**当前字的笔划数据 */
  characterStrokes: any;
  /**到目前为止测试期间错误总数 */
  totalMistakes: any;
  /**当前笔画数 */
  strokeNum: number;
  /**到目前为止用户绘制的笔划所犯的错误数 */
  mistakesOnStroke: number;
  /**测验完成前剩余的笔画数 */
  strokesRemaining: number;
  /**对象包含用户绘制的 pathString ，用于评分的分数 */
  drawnPath: any;
}

export interface options {
  /**需要加载的字 */
  character: string;
  /** 字符加载函数，字符托管在腾讯静态文件服务，须被改写
   *
   * 详见 https://hanziwriter.org/cn/docs.html#loading-character-data-link
   * */

  charDataLoader: (char: string, onLoad: any, onError: any) => void;
  /** 成功加载字符数据时的回调。 使用已加载的数据调用此函数。 这可以用于实现加载微调器 */
  onLoadCharDataSuccess?: any;
  /** 字符数据加载失败时的回调。 无论故障原因来自charDataLoader，都会传递此函数*/
  onLoadCharDataError: any;
  /** default true. Controls whether the outline is shown or hidden on the first render. */
  showOutline?: boolean;
  /**默认为 true。 控制是否在第一个渲染上显示或隐藏轮廓 */
  showCharacter?: boolean;
  /**选择以svg还是canvas的方式渲染，默认以svg方式渲染 */
  renderer?: "svg" | "canvas";

  // positioning options
  /**数值。 画布的宽度单位像素） */
  width: number;
  /**数值。 画布的高度（单位像素） */
  height: number;
  /** 默认 20。 画布的角色和边缘之间的填充（单位像素） */
  padding?: number;

  // animation options
  /**默认 1。 绘制每个笔划的速度必须大于0.增加此数字可以更快地绘制笔划，减少绘制笔划的速度更慢 */
  strokeAnimationSpeed?: number;
  /**默认 400。 调用 writer.show() 和 writer.hide() 时在显示和隐藏笔划之间转换的时间（以毫秒为单位） */
  strokeFadeDuration?: number;
  strokeHighlightDuration?: number;
  /**数值， 默认 2。 在测验中给出提示时突出显示每个笔划的速度必须大于0.增加此数字以突出显示更快，减少以突出显示更慢 */
  strokeHighlightSpeed?: number;
  /** 默认 1000。 动画时每个笔画之间的时间（以毫秒为单位） */
  delayBetweenStrokes?: number;
  /**默认 2000。 循环动画时每个动画循环之间的时间 */
  delayBetweenLoops?: number;

  // colors
  /**十六进制字符, 默认 '#555'。 每个笔画的颜色 */
  strokeColor?: string;
  /**十六进制字符, 默认 null。 如果存在偏旁部首数据，则在笔划中绘制偏旁部首的颜色。 如果没有设置，激光将绘制与其他笔划相同的颜色 */
  radicalColor?: null;
  /**十六进制字符, 默认 '#AAF'。 用于在测验中突出显示的颜色 */
  highlightColor?: string;
  /**十六进制字符, 默认 '#DDD'。 汉字轮廓颜色 */
  outlineColor?: string;
  /**十六进制字符, 默认 '#333'。 用户测验时绘制线条的颜色 */
  drawingColor?: string;

  // quiz options
  /**默认值：1，取值范围(0,1] 值越大，校验越宽松 */
  leniency?: number;
  /**默认值：2，多少次touchmove事件触发一次绘制， 值越大，笔迹越稀疏 */
  quizInterval?: number;
  /**默认值：0，用户笔记点直接的像素最小距离间隔， 值越大，笔迹越稀疏，防止图片堆叠 */
  miniDistance?: number;
  /**默认值：false,用户每一笔成功后，是否保留用户笔迹，quizInterval过小时开启可能造成性能问题 */
  keepUserStrokeAfterSuccess: boolean;
  /**绘制用户笔迹的函数，默认用线条绘制，可以自定义 */
  drawUserStrokeAction?: (ctx: any, points: [{ x: string; y: string }]) => void;
  addPoint?: (ctx: any, points: [{ x: string; y: string }]) => void;
  /**默认值: false,是否在用户轻触屏幕的时候也开启校验 */
  checkSingleStroke?: boolean;
  /**默认 3。 中风高亮提示之前的未命中数被给予用户。 设置为 false 以禁用。 创建测验时也可以设置此项 */
  showHintAfterMisses?: number;
  /**默认 true。 控制当用户完成绘制整个角色时，测验是否会短暂突出显示角色。 创建测验时也可以设置此项 */
  highlightOnComplete?: boolean;
  /**十六进制字符, 默认 null。 在测验中突出显示角色时使用的颜色。 如果未设置，则将使用highlightColor。 仅当highlightOnComplete为true时才相关 */
  highlightCompleteColor?: string;

  // undocumented obscure options
  drawingFadeDuration?: number;
  /** 默认 400。 用户测验时绘制线条的宽度 */
  drawingWidth?: number;
  strokeWidth?: number;
  outlineWidth?: number;
  /**渲染主体重写 */
  rendererOverride?: any;
}
