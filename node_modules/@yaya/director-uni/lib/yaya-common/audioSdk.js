import ws from "./ws";
import { formatParam, checkNetworkType } from "./parmas";
class voiceSdk {
  constructor(initObj) {
    // audioText 必须，对1-3类型为朗读英文文本， 对4类型为所有可能的问题回答（数组）， 对5类型为参考复述文本， 6 类型为音标
    this.rt = initObj.audioText;
    // audioType  必须，评分类型 1 单词；2 句子； 3 段落； 4 问题回答； 5 复述;  6 音标
    this.st = initObj.audioType;
    this.audioSrc = null;
    // 录音控制器
    this.recorderManager = wx.getRecorderManager();
    // 音频控制器
    this.innerAudioContext = null;
    this.ws = null;
    //录音完毕后一分钟无反馈
    this.wsTimer = null;
    this.audioStayTime = null;
    //第一次接收到服务器返回
    this.isFirst = true;

    this.recorderManager.onStart((res) => {
      console.log("-------录音开始-----");
      // cb && cb();
      // setTimeout(() => {
      //   this.stop();
      // },60000);
    });
    this.recorderManager.onPause((res) => {
      console.log("-------录音暂停-----");
      // cb && cb();
    });

    this.recorderManager.onFrameRecorded((res) => {
      const { frameBuffer, isLastFrame } = res;
      const _this = this;
      console.log("-------录音切片数据上传-----");
      console.log(res);
      ws.sendSocketMessage({
        data: frameBuffer,
        success(res) {
          // console.log("sendSocketMessage");
          // console.log(res);
        },
        fail() {
          //5s检测一次网络
          _this.checkNetworkTimer = setInterval(() => {
            checkNetworkType().then((res) => {
              _this.stop(() => {
                //发送失败了重连
                ws.reConnect();
              });
            });
          }, 3000);
        },
      });
    });
  }
  //评测录音开始，启动麦克风，启动录音，实时音频压缩，传输启动
  start(cb) {
    // this.recorderManager = wx.getRecorderManager();
    console.log("语音SDK开始start   recorderManager", this.recorderManager);
    this.innerAudioContext = wx.createInnerAudioContext();
    this.recorderManager.start({
      format: "mp3",
      // 语音包达到2k的时候上传数据
      frameSize: 2,
    });
    this.connectWs();
  }
  resume(initObj) {
    initObj.audioText && (this.rt = initObj.audioText);
    initObj.audioType && (this.st = initObj.audioType);
    this.recorderManager.resume();
    this.connectWs();
  }
  connectWs() {
    const data = formatParam(this.rt, this.st);
    const url = `wss://www.zuoyebang.com/cngop/ws/speech?${data}`;
    // const url = `ws://172.30.12.22:8888/cngop/ws/speech?${data}`;
    ws.connectSocket({ url });
  }

  //评测录音结束，关闭麦克风，停止录音，完成音频传输，保存本地音频
  stop(cb) {
    this.recorderManager.stop();
    // 监听录音结束
    this.recorderManager.onStop((res) => {
      console.log("-------停止录音-----");
      console.log(res);
      cb && cb(res);
      this.sendEos();
    });
  }
  // 断开链接
  sendEos() {
    let _this = this;
    ws.sendSocketMessage({
      data: "EOS",
      success(res) {
        console.log(
          "sendSocketMessage EOSsendSocketMessage EOSsendSocketMessage EOS"
        );
        // 停止录音60秒没返回报错
        // this.wsTimer = setTimeout(()=>{
        //   _this.onError();
        //   console.log('EOS 发完 关闭');
        //   ws.closeSocket();
        // },60000);
      },
      fail(res) {
        //5s检测一次网络
        _this.checkNetworkTimer = setInterval(() => {
          checkNetworkType().then((res) => {
            _this.stop(() => {
              //发送失败了重连
              console.log(`-------失败,发送了重连-----`);
              ws.reConnect();
            });
          });
        }, 5000);
      },
    });
  }
  pause(cb) {
    this.recorderManager.pause();
    this.recorderManager.onPause((res) => {
      console.log("-------暂停录音-----");
      console.log(res);
      this.sendEos(cb);
    });
  }
  //评测正常回调，接收评测结果。onResult()
  onResult(cb) {
    ws.onSocketMessageCallback = (res) => {
      console.log("接受服务器数据接受服务器数据");
      console.log(res);
      if (!this.rt) {
        return;
      }
      if (res.status === 0) {
        // 最后一次
        const data = JSON.parse(res.result.hypotheses[0].transcript);
        if (res.result.final) {
          // 获取音频url
          this.audioSrc = data.online_audio_url;
          console.log("接受到结果之后关闭");
          ws.closeSocket();
          clearTimeout(this.wsTimer);
          clearInterval(this.checkNetworkTimer);
          cb && cb(Object.assign(data, { isFinnal: true }));
        } else {
          cb && cb(Object.assign(data, { isReceiving: true }));
        }
      }
    };
  }
  //评测失败回调，接收错误信息。onError(int, string)
  onError(cb) {
    this.recorderManager.onError((res) => {
      cb && cb(res);
    });
  }
  // 回放录音，根据音频ID进行回放，优先本地cache，其次bos存储
  playBack() {
    // value 从哪取？
    this.innerAudioContext.src = this.audioSrc;
    this.innerAudioContext.play();
  }
  // 停止回放录音。 stopPlayBack()
  stopPlayBack() {
    this.innerAudioContext.stop();
  }

  //销毁
  destory() {
    this.rt = null;
    this.st = null;
    this.audioSrc = null;
    // 录音控制器
    // this.recorderManager = null;
    this.recorderManager.stop();
    // 音频控制器
    this.innerAudioContext = null;
    ws.closeSocket();
    clearTimeout(this.wsTimer);
    //录音完毕后一分钟无反馈
    this.wsTimer = null;
    this.audioStayTime = null;
    console.log(`-------录音sdk destroyed-----`);
  }
}

export default voiceSdk;
