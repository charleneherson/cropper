// socket已经连接成功
var socketOpen = false;
// socket已经调用关闭function
var socketClose = false;
// socket发送的消息队列
var socketMsgQueue = [];
// 错误重连次数
var errorCount = 0;
// 终止心跳
// var heartBeatTimeOut = null;
// 终止重新连接
var connectSocketTimeOut = null;
var param = {};
// 当前重连次数
var connectNum = 0;
// 异常情况，websocket自动断开连接
var isAutoClose = true;
var webSocket = {
  connectSocket: function(options) {
    socketOpen = false;
    socketClose = false;
    isAutoClose = false;
    socketMsgQueue = [];
    param = options;
    // 打开信道
    wx.connectSocket({
      url: options.url,
      tcpNoDelay: false, // 建立TCP 连接的时候的 TCP_NODELAY 设置
      perMessageDeflate: false, // 是否开启压缩扩展
      timeout: 60000,
      method: "PUT",
      success(res) {
        console.log("-------打开信道-----");
        console.log(res);
      },
    });
  },
  sendSocketMessage: function(options) {
    if (socketOpen) {
      wx.sendSocketMessage({
        data: options.data,
        success: function(res) {
          if (options) {
            options.success && options.success(res);
          }
        },
        fail: function(res) {
          if (options) {
            options.fail && options.fail(res);
          }
        },
      });
    } else {
      socketMsgQueue.push(options.msg);
    }
  },
  // 主动关闭心跳重连
  closeSocket: function(options) {
    errorCount = 0;
    socketClose = true;
    isAutoClose = false;
    var self = this;
    // self.resetHeart();
    console.log("调用关闭方法了。。。。。。");
    wx.closeSocket({
      success: function(res) {
        console.log("-------关闭信道-----");
        console.log(res);
        if (options) {
          options.success && options.success(res);
        }
      },
      fail: function(res) {
        console.log("关闭失败");
        console.log(res);
        if (options) {
          options.fail && options.fail(res);
        }
      },
    });
  },

  // 收到消息回调
  onSocketMessageCallback: function(msg) {},
  // 心跳重置
  // resetHeart() {
  //   clearTimeout(heartBeatTimeOut);
  //   return this;
  // },
  // 心跳开始
  // startHeart() {
  //   let _this = this;
  //   heartBeatTimeOut = setInterval(() => {
  //     wx.sendSocketMessage({
  //       // 心跳发送的信息应由前后端商量后决定
  //       data: '',
  //       success(res) {
  //         console.log(res)
  //         console.log("发送心跳成功");
  //       },
  //       fail(err) {
  //         console.log(err)
  //         _this.resetHeart()
  //       }
  //     });
  //   }, 3000);
  // },
  // 重连方法，会根据时间频率越来越慢
  reConnect(options) {
    let timer,
      _this = this;
    if (connectNum < 20) {
      timer = setTimeout(() => {
        console.log("重连11111111");
        this.connectSocket(param);
      }, 3000);
      connectNum += 1;
    } else if (connectNum < 50) {
      timer = setTimeout(() => {
        this.connectSocket(param);
      }, 10000);
      connectNum += 1;
    } else {
      timer = setTimeout(() => {
        this.connectSocket(param);
      }, 450000);
      connectNum += 1;
    }
  },
};

// 监听WebSocket连接打开事件。callback 回调函数
wx.onSocketOpen(function(res) {
  console.log("WebSocket连接已打开!");
  // 如果已经调用过关闭function
  if (socketClose) {
    console.log("socketClose");
    webSocket.closeSocket();
  } else {
    socketOpen = true;
    for (var i = 0; i < socketMsgQueue.length; i++) {
      webSocket.sendSocketMessage({ data: socketMsgQueue[i] });
    }
    socketMsgQueue = [];
    // 开始心跳检测 3s检测一次
    // webSocket.resetHeart().startHeart();
  }
});
// 监听WebSocket错误。重连3次
wx.onSocketError((res) => {
  console.log("WebSocket连接打开失败，请检查！", res);
  if (errorCount > 3) {
    socketClose = true;
    return;
  }
  console.log("重连,WebSocket打开失败");
  webSocket.connectSocket(param);
  errorCount++;
});
// 监听WebSocket关闭。
wx.onSocketClose(function(res) {
  console.log("WebSocket 已关闭！");
  console.log(socketClose);
  console.log(errorCount);
  console.log(res);
  if (errorCount > 3) {
    socketClose = true;
    return;
  }
  if (!isAutoClose) {
    webSocket.closeSocket();
  }
  if (!socketClose && isAutoClose) {
    clearTimeout(connectSocketTimeOut);
    connectSocketTimeOut = setTimeout(() => {
      webSocket.connectSocket(param);
    }, 3000);
  }
  errorCount++;
});
// 监听WebSocket接受到服务器的消息事件。
wx.onSocketMessage(function(res) {
  try {
    // console.log(`收到服务器内容------->  res: ${JSON.stringify(res)}`);
    // console.log(res);
    //把JSONStr转为JSON
    if (res && res.data) {
      let message = res.data.replace(" ", "");
      if (typeof message != "object") {
        message = message.replace(/\ufeff/g, ""); //重点
        var jj = JSON.parse(message);
        message = jj;
      }
      webSocket.onSocketMessageCallback(message);
    }
  } catch (err) {
    console.log(
      `Catch 收到服务器内容异常------->  res: ${JSON.stringify(err)}`
    );
  }
});

module.exports = webSocket;
