export class EventEmitter {
  constructor() {
    this._events = {};
  }
  on(type, handler) {
    (this._events[type] || (this._events[type] = [])).push(handler);
    return this;
  }
  off(type, handler) {
    if (this._events[type]) {
      if (handler) {
        this._events[type].splice(this._events[type].indexOf(handler) >>> 0, 1);
      } else {
        this._events[type] = [];
      }
    }
    return this;
  }
  emit(type) {
    let payload = [].slice.call(arguments, 1);
    let arr = this._events[type] || [];
    for (let index = 0; index < arr.length; index++) {
      let handler = this._events[type][index];
      handler.apply(this, payload);
    }
    return this;
  }
  once(type, handler) {
    let fired = false;
    function f() {
      this.off(type, f);
      if (!fired) {
        fired = true;
        handler.apply(this, arguments);
      }
    }
    return this.on(type, f);
  }
  destroy() {
    this._events = {};
  }
}
