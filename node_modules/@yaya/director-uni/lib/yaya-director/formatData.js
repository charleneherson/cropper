import {
  initObj,
  directorData,
  componentType,
  scenceType,
} from "./director-interface";

function format(
  scenceVal,
  scencesArr,
  questionListObj,
  category,
  id,
  moduleIdAndblockIdObj
) {
  const initData = JSON.parse(JSON.stringify(directorData));
  if (
    scencesArr.length > 0 &&
    scencesArr[scencesArr.length - 1].type === scenceType[category]
  ) {
    scencesArr[scencesArr.length - 1].ext.questionList.push(
      Object.assign(questionListObj[scenceVal.tid], moduleIdAndblockIdObj)
    );
  } else {
    id++;
    initData.ext.questionList.push(
      Object.assign(questionListObj[scenceVal.tid], moduleIdAndblockIdObj)
    );
    initData.id = id;
    //后续可配置
    initData.actions.complete.target = initData.id + 1;
    initData.actions.success.target = initData.id + 1;
    initData.type = scenceType[category];
    scencesArr.push(initData);
  }
  return {
    scencesArr,
    id,
  };
}
export function formatData(data) {
  let id = -1;
  let directorDataStr = JSON.stringify(directorData);
  if (Object.prototype.toString.call(data) != "[object Object]") return;
  const componentListArr = data.componentList;
  const questionListObj = data.questionList;
  const blockId = data.blockId;
  const moduleId = data.moduleId;
  const moduleIdAndblockId = { blockId, moduleId };
  const directorObj = JSON.parse(JSON.stringify(initObj));

  componentListArr.forEach((val, idx) => {
    if (val.componentType === 5) {
      id++;
      const vedioData = JSON.parse(directorDataStr);
      vedioData.ext = Object.assign(val.componentContent, moduleIdAndblockId);
      vedioData.id = id;
      vedioData.actions.complete.target = vedioData.id + 1;
      vedioData.actions.success.target = vedioData.id + 1;
      vedioData.type = componentType[5];
      directorObj.scenes.push(vedioData);
      // scence
    } else if (val.componentType === 4) {
      const componentContentArr = val.componentContent;
      let scencesArr = [];
      componentContentArr.forEach((scenceVal, _index) => {
        if ([93, 94].includes(questionListObj[scenceVal.tid].category)) {
          let data = format(
            scenceVal,
            scencesArr,
            questionListObj,
            questionListObj[scenceVal.tid].category,
            id,
            moduleIdAndblockId
          );
          scencesArr = data.scencesArr;
          id = data.id;
        } else if (
          [95, 96, 97].includes(questionListObj[scenceVal.tid].category)
        ) {
          let data = format(
            scenceVal,
            scencesArr,
            questionListObj,
            questionListObj[scenceVal.tid].category,
            id,
            moduleIdAndblockId
          );
          scencesArr = data.scencesArr;
          id = data.id;
        } else if (questionListObj[scenceVal.tid].category === 98) {
          let data = format(
            scenceVal,
            scencesArr,
            questionListObj,
            questionListObj[scenceVal.tid].category,
            id,
            moduleIdAndblockId
          );
          scencesArr = data.scencesArr;
          id = data.id;
        }
        if (_index === componentContentArr.length - 1) {
          directorObj.scenes = directorObj.scenes.concat(scencesArr);
          scencesArr = [];
        }
      });
    }
  });

  directorObj.origin = data;
  directorObj.startScene.id = directorObj.scenes[0].id;
  directorObj.scenes[directorObj.scenes.length - 1].actions.complete.type =
    "destroy";
  directorObj.scenes[directorObj.scenes.length - 1].actions.success.type =
    "destroy";
  directorObj.origin = data;
  return directorObj;
}
