import { Scene } from "../yaya-scene/scene";
import { EventEmitter } from "../yaya-common/event-emitter";

/**
 * Director基类
 * todo: 需要兼容小程序，有一定的数据传输限制，组件间不能直接传类的实例
 */
export class Director extends EventEmitter {
  /**
   *
   * @param {*} raw
   */
  constructor(raw) {
    super();
    /**
     * 原始数据
     */
    this.raw = null;
    /**
     * 场景原始数据map
     */
    this.rawScenesMap = new Map();
    /**
     * 场景实例map
     */
    this.scenesMap = new Map();
    /**
     * 当前场景
     */
    this.currentScene = null;
    /**
     * 场景栈
     */
    this.aliveScenes = [];
    /**
     * 场景队列
     */
    this.sceneQueue = [];
  }
  init(raw, $nexttick) {
    this.$nexttick = $nexttick;
    this.raw = raw;
    this.startScene = raw.startScene;
    this.currentScene = null;
    this.aliveScenes = [];
    // todo 增加一个常驻的队列实现swiper逻辑 （临时实现）
    this.sceneQueue = [];
    this.rawScenesMap = new Map();
    this.scenesMap = new Map();
    raw.scenes.forEach((v) => {
      this.rawScenesMap.set(v.id, v);
      let scene = new Scene(v, this);
      this.scenesMap.set(v.id, scene);
      this.sceneQueue.push(scene);
    });
  }
  /**
   * 启动场景
   */
  start() {
    let scene = this.doAction({
      type: "push",
      target: this.startScene.id,
      payload: this.startScene.payload,
    });
    this.emit("start", scene);
  }
  /**
   * 跳转下一个场景
   */
  next() {
    this.doAction(this.currentScene.actions.complete);
  }
  stop() {}
  /**
   * 处理场景行为
   * @param {*} action
   *
   */
  doAction(action) {
    console.log("doAction", JSON.stringify(action));
    switch (action.type) {
      case "push":
        if (this.getTopScene()) {
          this.pauseScene(this.getTopScene().id, action.payload);
        }
        this.pushScene(action.target, action.payload);
        break;
      case "destroy":
        this.destoryScene(action.payload);
        if (this.getTopScene()) {
          this.resumeScene(this.getTopScene().id, action.payload);
        }
        if (this.aliveScenes.length === 0) {
          this.emit("finished");
        }
        break;
      case "replace":
      default:
        this.replaceScene(action.target, action.payload);
        break;
    }
  }
  getScene(sceneID) {
    return this.scenesMap.get(sceneID);
  }
  pushScene(sceneID, payload) {
    let rawScene;
    if (sceneID !== undefined) {
      rawScene = this.rawScenesMap.get(sceneID);
    }
    if (!rawScene) {
      console.error("director数据错误", this);
      return;
    }
    let scene = this.scenesMap.get(rawScene.id);
    if (!scene) {
      scene = new Scene(rawScene, this);
      this.scenesMap.set(rawScene.id, scene);
    }
    this.currentScene = scene;
    this.aliveScenes.push(scene);
    setTimeout(() => {
      scene.start(payload);
      // todo 这个地方必须得等待所有scene组件示例化后才能进行，这个异步的问题还需要更好地解决
    }, 1000);
  }
  replaceScene(sceneID, payload) {
    this.destoryScene({});
    this.$nexttick(() => {
      this.pushScene(sceneID, payload);
    });
  }
  destoryScene(payload) {
    let scene = this.currentScene;
    if (scene) {
      this.aliveScenes.splice(
        this.aliveScenes.indexOf(this.currentScene) >>> 0,
        1
      );
      this.currentScene.destroy();
      this.currentScene = this.getTopScene();
    }
  }
  pauseScene(sceneID, payload) {
    this.$nexttick(() => {
      this.getScene(sceneID).pause(payload);
    });
  }
  resumeScene(sceneID, payload) {
    this.$nexttick(() => {
      this.getScene(sceneID).resume(payload);
    });
  }
  getTopScene() {
    return this.aliveScenes[this.aliveScenes.length - 1] || null;
  }
  getCurrentSceneIndex() {
    if (!this.currentScene) {
      return -1;
    }
    for (let i = 0; i < this.sceneQueue.length; i++) {
      const scene = this.sceneQueue[i];
      if (scene.id === this.currentScene.id) {
        return i;
      }
    }
    return -1;
  }
  destroy() {
    this.currentScene = null;
    this.aliveScenes = [];
    this.rawScenesMap = new Map();
    this.scenesMap = new Map();
    this.sceneQueue = [];
    super.destroy();
  }
}

export const director = new Director();
