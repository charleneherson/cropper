export declare class RouteSwitcher {
    isCommonActionReturned: boolean;
    isRouteConfigReturned: boolean;
    platform: string;
    routeConfUrl: string;
    isParsingUrlByOwn: boolean;
    routeMap: routeMapper;
    static instance: RouteSwitcher;
    sdk: any;
    initTimestamp: number;
    constructor(mockSdk?: any);
    pollingRoutesConfig(configUrl: string): void;
    pageTo(params: any, callback?: pageToCallback): any;
    parsingRoute(to: pageToDestination): string;
    storeRoutesMap(routeConfUrl: string): void;
    getStoredRoutes(): routeMapper;
    getRouteConfUrl(): string;
    detectEnv(): {
        type: string;
        name?: undefined;
    } | {
        type: string;
        name: string;
    };
}
interface pageToDestination {
    module: string;
    page: string;
    params: string;
    prefix: string;
}
interface pageToCallback {
    (from: string, to: string): void;
}
interface routeMapper {
    app: string;
    host: string;
    prefix_path: string;
    routes: {
        [key: string]: {
            value: string;
            host?: string;
            prefix_path?: string;
        };
    };
}
declare global {
    interface Window {
        __router__: any;
    }
}
export declare const pageTo: any;
export {};
