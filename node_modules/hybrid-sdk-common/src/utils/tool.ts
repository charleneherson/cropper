import {hybrid as postMessageHybrid} from "./hybrid"
import {hybrid as iframeHybrid} from "./iframeHybrid"

/**
 * 
 * @param obj 删除对象中的undefined
 */
export function deleteEmptyKeyFromObject(obj: Object): Object {
  for (var key in obj) {
    (<any>obj)[key] === undefined && delete (<any>obj)[key]
  }

  return obj;
}

// 获取url查询字符串
export function getQueryString(name: any) {
  var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i')
  var result = window.location.search.substr(1).match(reg) // 对querystring匹配目标参数
  if (result != null) {
    return decodeURIComponent(result[2])
  } else {
    return null
  }
}

// 判断对象是否为空
function isEmptyObject(obj: any) {
  var name
  for (name in obj) {
    return false
  }
  return true
}

// 是否是object
function isPlainObject(obj: any) {
  return Object.prototype.toString.call(obj) === '[object Object]'
}

function cleanArray(actual: any) {
  const newArray = []
  for (var i = 0, len = actual.length; i < len; i++) {
    if (actual[i]) {
      newArray.push(actual[i])
    }
  }
  return newArray
}

/**
 * json对象转成查询字符串
 * @param {Object} json
 */
function queryString(json: any) {
  if (!json) return ''
  return cleanArray(
    Object.keys(json).map(key => {
      if (json[key] === undefined) return ''
      return encodeURIComponent(key) + '=' + encodeURIComponent(json[key])
    })
  ).join('&')
}

export function trim(x: any) {
  return x.replace(/^\s+|\s+$/gm, '')
}

// 生成guid
function guid() {
  return 'xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (Math.random() * 16) | 0
    var v = c === 'x' ? r : (r & 0x3) | 0x8
    return v.toString(16)
  })
}

export function resolveCallbackFactory(callback?: Function){
  return function(res: any){
    callback && callback(res);
    return Promise.resolve(res);
  };
} 
export function rejectCallbackFactory(callback?: Function){
  return function(res: any){
    callback && callback(res);
    return Promise.reject(res);
  };
} 

export function getMergedCallback(success?: Function, fail?: Function): Function {
  return function (res: any = {}) {
    if(res.code == 200){
      if(res.data && res.data.callResult === false){
        fail && fail(res.data);
      }else if(res.data){
        success && success(res.data);
      }else{
        success && success(res);
      }
    }else if(res.errcode == 200){
      res.data && success && success(res.data);
      !res.data && success && success(res);
    }else if(res.code == 404 || res.errcode == 404){
      res.data && fail && fail(res.data);
      !res.data && fail && fail(res);
    }else{
      success && success(res);
    }
  }
}

export function callbackPromiseFactory(hybrid: any ,action: string, params?: any){
  return new Promise(function(resolve: Function, reject: Function){
    let success = function(res: any){
        resolve(res);
    };

    let fail = function(res: any){
        reject(res);
    };
    params && hybrid(action, params, getMergedCallback(success, fail));
    !params && hybrid(action, getMergedCallback(success, fail));
  });
}

export function getPromiseFunc(action: string, params?: any) {
  return callbackPromiseFactory(postMessageHybrid, action, params);
}

export function getIframePromiseFunc(action: string, params?: any) {
  return callbackPromiseFactory(iframeHybrid, action, params);
}

const logPool: string[] = [];

export function logEntry() {
  let showLogBtn = document.createElement('button');
  let clearLogBtn = document.createElement('button');
  showLogBtn.innerHTML = '看log';
  clearLogBtn.innerHTML = 'clear log';
  showLogBtn.setAttribute('style', 'position: fixed; top: 300px; left: 0; background-color: #F00; padding: 10px; color: #FFF;');
  clearLogBtn.setAttribute('style', 'position: fixed; top: 340px; left: 0; background-color: #FC0; padding: 10px; color: #FFF;');
  showLogBtn.onclick = function(e){
    alert(logPool.join('\n---------\n'));
  };

  clearLogBtn.onclick = function(e){
    logPool.length = 0;
    alert('log 已清空');
  };
  
  window.onload=function(){
    document.body.appendChild(showLogBtn);
    document.body.appendChild(clearLogBtn);
  };
}

export function addLog(log: string) {
  logPool.push(log);
}

export const deepClone = (obj:any) => {
  if (obj === null) return null;
  let clone = Object.assign({}, obj);
  Object.keys(clone).forEach(
    key => (clone[key] = typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key])
  );
  return Array.isArray(obj) && obj.length
    ? (clone.length = obj.length) && Array.from(clone)
    : Array.isArray(obj)
      ? Array.from(obj)
      : clone;
};

export const getCookie = (cname:string) => {
  var name = cname + "=";
  var ca = document.cookie.split(';');
  for(var i=0; i<ca.length; i++){
    var c = ca[i].trim();
    if (c.indexOf(name)==0) return c.substring(name.length,c.length);
  }
  return null;
}

// export
export default {
  getQueryString,
  isEmptyObject,
  isPlainObject,
  queryString,
  trim,
  guid,
  getMergedCallback,
  deepClone,
  getCookie
}
