import axios from "axios";
import { deepClone, getCookie, getQueryString } from "../utils/tool";
import * as core from "./index";
import { switchConfig } from "../utils/system";
import { resolveCallbackFactory, rejectCallbackFactory } from "../utils/tool";
const LOCAL_STORE_KEY = "__sparta_route_map__";
const ROUTE_CONFIG_REQUEST_INTERVAL_BY_MS = 1 * 60 * 1000;
const APP_SUPPORT_ROUTE_VERSION = 210;

export class RouteSwitcher {
  isCommonActionReturned = false;
  isRouteConfigReturned = false;
  platform: string;
  routeConfUrl: string;
  isParsingUrlByOwn: boolean;
  routeMap: routeMapper = null;
  static instance: RouteSwitcher = null;
  sdk: any;
  initTimestamp: number;

  constructor(mockSdk?: any) {
    this.initTimestamp = new Date().getTime();
    console.log(`初始化RouteSwitcher时间${this.initTimestamp}`);
    this.sdk = mockSdk ? mockSdk : core;
    if (RouteSwitcher.instance) {
      return RouteSwitcher.instance;
    }
    const _this = this;
    console.log(`switchConfig`, switchConfig);
    _this.isParsingUrlByOwn = switchConfig.jsBridge_vcnum < APP_SUPPORT_ROUTE_VERSION;
    // 获取APP名，请求对应的路由表
    // this.sdk.getCommonParameters().then((response: any) => {
    //   console.log(
    //     `获取公参成功时间差${new Date().getTime() - _this.initTimestamp}`
    //   );
    //   console.log(response);
    //   const { appid } = response;
    //   const vc: number | string = response.vc;
    //   const parsedVc = typeof vc === "number" ? vc : parseInt(vc);
    //   _this.platform = appid;
    //   _this.routeConfUrl = _this.getRouteConfUrl();

    //   // _this.isParsingUrlByOwn = parsedVc < APP_VC_CRITICAL_VALUE_MAP[appid];
    //   _this.isCommonActionReturned = true;

    //   _this.pollingRoutesConfig(_this.routeConfUrl);
    // }, (error:any)=>{
    //   console.error('Common params action 调用失败')
    //   throw error
    // });
  }

  pollingRoutesConfig(configUrl: string) {
    if (!configUrl) {
      console.log(`configUrl 为空，不能请求路由表`);
      return;
    }
    this.storeRoutesMap(configUrl);
    const intervalId = setInterval(() => {
      this.storeRoutesMap(configUrl);
    }, ROUTE_CONFIG_REQUEST_INTERVAL_BY_MS);
  }

  pageTo(params: any, callback?:pageToCallback) {
    console.log(`pageTo this`);
    console.log(this);
    let resultUrl;
    if (this.isParsingUrlByOwn) {
      const parsedUrl = this.parsingRoute(params);
      const otherParams = deepClone(params);
      delete otherParams.module;
      delete otherParams.page;
      delete otherParams.params;
      delete otherParams.prefix;
      const routeParams = { pageUrl: parsedUrl, ...otherParams };
      // 无论调openWindow还是open什么，这个pageTo最后都走到一个具体的action，所以可以用openXXX的callback
      console.log("sdk.core_openWindow({pageUrl:parsedUrl, ...otherParams})");
      console.log(routeParams);
      let success = resolveCallbackFactory(callback);
      let fail = rejectCallbackFactory(callback);
      return this.sdk.core_openWindow(routeParams).then(success, fail);
    } else {
      params.pageKey = `zyb://${params.module}/page/${params.page}${params.params}`;
      delete params.module;
      delete params.page;
      delete params.params;
      console.log("sdk.core_openUrl(to, callback)");
      console.log(params);
      let success = resolveCallbackFactory(callback);
      let fail = rejectCallbackFactory(callback);
      return this.sdk.core_openUrl(params).then(success, fail);
    }
  }

  parsingRoute(to: pageToDestination){
    const { module, page, params, prefix } = to;
    const _prefix = prefix || '/static/hy/'
    let resultUrl = `${_prefix}${module}/${page}.html${params}`
    return resultUrl
  }

  // parsingRoute(to: pageToDestination, routesMap: routeMapper) {
  //   const { module, page, params } = to;
  //   const { app, host, prefix_path, routes } = routesMap;

  //   let resultUrl;
  //   const zybUrl = `zyb://${module}/page/${page}`;
  //   const valueOfZybUrl = routesMap.routes[zybUrl];
  //   console.log(`valueOfZybUrl`);
  //   console.log(valueOfZybUrl);
  //   if (valueOfZybUrl) {
  //     // 路由表中存在相应的路由信息，直接取
  //     const latterUrl = valueOfZybUrl.value;
  //     const urlBeforeModule = `${
  //       valueOfZybUrl.host ? valueOfZybUrl.host : routesMap.host
  //     }${
  //       valueOfZybUrl.prefix_path
  //         ? valueOfZybUrl.prefix_path
  //         : routesMap.prefix_path
  //     }`;
  //     resultUrl = urlBeforeModule + latterUrl;
  //   } else {
  //     // no matching route item in route map, need guessing
  //     const zybUrlModulePart = `zyb://${module}/page/`;
  //     const sameModuleItems = Object.entries(routesMap.routes).filter(
  //       ([zybUrl, value]) => {
  //         return zybUrl.startsWith(zybUrlModulePart);
  //       }
  //     );
  //     let host;
  //     let prefixPath;
  //     if (sameModuleItems.length > 0) {
  //       const {
  //         host: specHost,
  //         prefix_path: specPrefixPath
  //       } = sameModuleItems[0][1];
  //       host = specHost ? specHost : routesMap.host;
  //       prefixPath = specPrefixPath ? specPrefixPath : routesMap.prefix_path;
  //     } else {
  //       host = routesMap.host;
  //       prefixPath = routesMap.prefix_path;
  //     }
  //     const urlBeforeModule = `${host}${prefixPath}`;
  //     resultUrl = `${urlBeforeModule}/${module}/${page}.html`;
  //   }
  //   const fullUrl = resultUrl + params;
  //   return fullUrl;
  // }

  storeRoutesMap(routeConfUrl: string) {
    const _this = this;
    axios.get(routeConfUrl).then((resp: any) => {
      const { data = {}, status } = resp;
      if ((status + "").startsWith("4") || (status + "").startsWith("5")) {
        throw new Error(
          `get sparta route failed with status: ${status}, data: ${JSON.stringify(
            data
          )} `
        );
      }
      // localstorage存储
      // window.localStorage.setItem(LOCAL_STORE_KEY, JSON.stringify(data))
      _this.routeMap = data;
      _this.isRouteConfigReturned = true;
      console.log(
        `获取路由表成功时间差${new Date().getTime() - _this.initTimestamp}`
      );
    });
  }

  getStoredRoutes() {
    return this.routeMap;
    // const routesJsonString = window.localStorage.getItem(LOCAL_STORE_KEY)
    // if(!routesJsonString) return null
    // let result = null
    // try{
    //     result = JSON.parse(routesJsonString)
    // }catch(e){
    //     console.error(e)
    //     throw new Error(`routesJsonString parse failed, string : ${routesJsonString}`)
    // }
    // return result
  }

  getRouteConfUrl(): string {
    const platform = this.platform;
    // TODO: 用上面的
    // const platform = 'airclass'
    const timestamp = new Date().getTime();
    const timestampByMinutes = Math.floor(timestamp / 100000);
    const envType = this.detectEnv();
    console.log(`envType`);
    console.log(envType);
    let routeConfPrefix;
    if (envType.type === "online") {
      routeConfPrefix = "https://xxx.bsc.com/route/online/";
    } else if (envType.type === "tips") {
      routeConfPrefix = " https://xxx.bsc.com/route/tips/";
    } else if (envType.type === "docker") {
      routeConfPrefix = `https://xxx.bcs.com/route/${envType.name}/`;
    } else {
      return null;
    }
    return `${routeConfPrefix}${platform}.json?t=${timestampByMinutes}`;
  }

  detectEnv() {
    const host: string = window.document.location.host;
    const dockerHostRegex = /(.*)-docker.*/g;
    const dockerRegexResult = dockerHostRegex.exec(host);
    if (host === "www.zybang.com") {
      // 线上或tips
      if (
        getCookie("__tips__") !== null ||
        getQueryString("__tips__") !== null
      ) {
        return {
          type: "tips"
        };
      }

      return {
        type: "online"
      };
    } else if (dockerRegexResult) {
      const dockerName = dockerRegexResult[1];
      return {
        type: "docker",
        name: dockerName
      };
    } else {
      return {
        type: "unknow"
      };
    }
  }
}

interface pageToDestination {
  module: string;
  page: string;
  params: string;
  prefix: string;
}

interface pageToCallback {
  (from: string, to: string): void;
}

interface routeMapper {
  app: string;
  host: string;
  prefix_path: string;
  routes: {
    [key: string]: {
      value: string;
      host?: string;
      prefix_path?: string;
    };
  };
}
const instance = new RouteSwitcher();
declare global {
  interface Window {
    __router__: any;
  }
}
window.__router__ = instance;
export const pageTo = instance.pageTo.bind(instance);
window.__router__.pageTo.bind(window.__router__);
