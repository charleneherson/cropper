import { getPromiseFunc, resolveCallbackFactory, rejectCallbackFactory} from "../utils/tool";
import { isInApp } from "../utils/system";
import axios, { Method } from 'axios'

// TODO: 1. 增加自定义headers 2.判断环境选择走端代理还是axios，保证接口一致 3.打包时需要排除axios

interface requestParams {
    type: Method;        //必填  请求方式
    url:string;         //必填  url地址
    headers?:object;     //设置  request header
    params?:object;      //可选  无参数时候,默认{}
    [propName: string]: any;
}

interface callback {
    (): any;
}

function webRequest(params: requestParams): any {
    return axios({
        method:params.type,
        url: params.url,
        headers: params.headers,
        data: params.params
    });
}

// const defaultResponse = {
//     code:200,
//     errcode: 200,
//     data: {
//         errorTips: '',
//         data: {
//             // 接口数据在这里
//         }
//     }
// };

const defaultParams: requestParams = {
    type: "post",
    url: "",
    params: {}
}

/**
 * 通过native调用接口
 * @param params 
 */
export function core_request(params: requestParams): any {
    let _params: requestParams = {
        ...defaultParams,
        ...params
    }

    return getPromiseFunc("core_httpRequest", _params);
}

/**
 * 通过native调用接口, 适配了之前的API
 * @param params 
 */
export function request(params: any, callback?: callback): any {
    let _callback= resolveCallbackFactory(callback);
    let _notFoundAction= rejectCallbackFactory(callback);

    if(isInApp){
        return core_request(params).then(_callback, _notFoundAction);
    }else{
        return webRequest(params).then((res: any)=>{
            const response =  {
                env: 'web',
                errorTips:'',
                ...res
            }
            _callback && _callback(response);
            return response;
        });
    }
}


