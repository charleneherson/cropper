import {
    listen,
    trigger,
    remove
} from "../utils/event"
import {hybrid} from "../utils/hybrid"

const win: any = window;
const DEFAULT_CALLBACK = function() {};
win.extroActionTypePool = win.extroActionTypePool ? win.extroActionTypePool : [];

export interface NativeCallBackData {
    action_type: ActionType;
    data: Object;
}

export enum ActionType {
    PageEnter          = "onPageActive",           // 页面所在的webviw 进出前台或被创建
    PageLeave          = "onPagePause",            // 页面所在的webview 进入后台
    PageDestroy        = "onPageDestroy",          // 页面所在的webview 销毁
    AppEnterBackground = "onEnterBackground",      // App进入后台
    AppEnterForeground = "onEnterForeground",      // App回到前台
    PagePullFresh      = "pullRefresh",            // 下拉刷新回调
}


export function onPageEnter (callback: Function = DEFAULT_CALLBACK){
    listen(ActionType.PageEnter, callback);
    return {
        remove: function () {
          remove(ActionType.PageEnter, callback)
        }
    }
}
export function onPageLeave (callback: Function = DEFAULT_CALLBACK){
    listen(ActionType.PageLeave, callback);
    return {
        remove: function () {
          remove(ActionType.PageLeave, callback)
        }
    }
}
export function onPageDestroy (callback: Function = DEFAULT_CALLBACK){
    listen(ActionType.PageDestroy ,callback);
    return {
        remove: function () {
          remove(ActionType.PageDestroy, callback)
        }
    }
}
export function onEnterBackground (callback: Function = DEFAULT_CALLBACK){
    listen(ActionType.AppEnterBackground ,callback);
    return {
        remove: function () {
          remove(ActionType.AppEnterBackground, callback)
        }
    }
}
export function onEnterForeground (callback: Function = DEFAULT_CALLBACK){
    listen(ActionType.AppEnterForeground ,callback);
    return {
        remove: function () {
          remove(ActionType.AppEnterForeground, callback)
        }
    }
}
export function onPagePullFresh (callback: Function = DEFAULT_CALLBACK){
    listen(ActionType.PagePullFresh ,callback);
    return {
        remove: function () {
          remove(ActionType.PagePullFresh, callback)
        },
        pullRefreshFinish: function(){
            hybrid('pullRefreshFinish');
        }
    }
}

// 扩展自定义全局监听
export function onNativeCallback(actionType: string, callback: Function = DEFAULT_CALLBACK){
    listen(actionType, callback);
    win.extroActionTypePool.push(actionType);
    return {
        remove: function () {
          remove(actionType, callback)
        }
    }
}


//暴露给端的
win.NATIVE_CALLBACK = function(res: NativeCallBackData){
    // 扩展事件
    var len = win.extroActionTypePool.length;
    if(len !== 0){
        for (let t=0; t<len; t++){
            if(res.action_type === win.extroActionTypePool[t]) {
                trigger(res.action_type, res.data);
                return;
            }
        }
    }

    // 通用事件
    switch (res.action_type) {
        case ActionType.PageEnter:
            trigger(ActionType.PageEnter, res.data);
            break;
    
        case ActionType.PageLeave:
            trigger(ActionType.PageLeave, res.data);
            break;
    
        case ActionType.PageDestroy:
            trigger(ActionType.PageDestroy, res.data);
            break;

        case ActionType.AppEnterBackground:
            trigger(ActionType.AppEnterBackground, res.data);
            break;

        case ActionType.AppEnterForeground:
            trigger(ActionType.AppEnterForeground, res.data);
            break;
    
        case ActionType.PagePullFresh:
            trigger(ActionType.PagePullFresh, res.data);
            break;

        default:
            console.log(`未知类型的全局回调, ${res.action_type}`)
            break;
    }
}