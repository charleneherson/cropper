import { NetworkURI, DataType, Comparator, EventDataType, PageID, EventID, ValueType, KeyType, ActType } from './common';
/**
 * 配置摘要
 */
export interface ProjectConfigSummary {
    /**
     * 完整配置文件md5，用于判断是否需要进行完整配置文件的更新
     */
    md5: string;
    /**
     * 真实配置文件的下载地址
     */
    fileName: string;
    /**
     * 全埋点sdk配置策略
     */
    tactics: Tactics;
}
/**
 * 配置主体
 */
export interface ProjectConfigDetail {
    /**
     * 项目id
     */
    id: string;
    /**
     * 项目名字
     *
     * @remark
     * 后台配置与查看，不下发
     */
    projectName?: string;
    /**
     * 上报策略配置
     *
     * @remark
     * 非Native SDK需要，Native有nlog策略，不需要
     */
    tactics?: Tactics;
    /**
     * 点位规则集合
     */
    rules: Array<Rule>;
    /**
     * 全局参数列表
     * 全局公参与业务公参
     *
     * @remark
     * 用于限制业务上报全局字段，全局字段必须通过配置后台配置下发，不在list中的字段不上报
     *
     * @example
     * ```ts
     * project.fields = ['t', 'paid', 'gradeId', 'spid']
     * ```
     * 业务通过sdk设置了gradeId、spid、spName三个业务公参，但spid公参不在公参声明里，不予上报
     */
    fields: Array<string>;
}
/**
 * 全埋点sdk策略配置
 *
 */
export interface Tactics {
    /**
     * 是否关闭sdk，不进行任何采集、上报操作
     *
     */
    disabled: boolean;
    /**
     * 是否仅在wifi下上报
     *
     * @default false
     */
    onlyWifi: boolean;
    /**
     * 发送周期，单位：秒
     *
     * @default 120
     */
    sendInterval: number;
    /**
     * wifi网络下，发送周期，单位：秒
     *
     * @default 60
     */
    sendIntervalWifi: number;
    /**
     * 最大重试次数
     * @default 3
     */
    retryExceptionCount: number;
    /**
     * 会话超时时间，单位：秒
     *
     * @default 30
     */
    sessionTimeout: number;
    /**
     * 离线存储超时天数，单位：天
     *
     * @default 10
     */
    storageExpires: number;
    [propName: string]: any;
}
/**
 * 点位规则 （一个点位对应条规则）
 */
export interface Rule {
    /**
     * 命中判断 1. 是否全局规则
     *
     * @remark
     * `isGlobal`
     *
     * - 为`true`，则在任意页面都需要进行本条规则的判定
     * - 为`false`，则根据`rule.pages`在特定页面判定
     */
    ig: boolean;
    /**
     *
     * 命中判断 2. 生效页面id
     *
     * @example
     * `pages`
     *
     * 仅在首页和用户中心两个页面生效：
     * ``` ts
     * rule.ps = ['zyb://native/index', 'zyb://hybrid/userCenter']
     * ```
     */
    ps: Array<PageID>;
    /**
     * 命中判断 3. 触发检查的事件类型
     * `eventType`
     *
     * @remark
     * 可触发检查的事件枚举类型见：{@link EventDataType}
     *
     * @example
     *
     */
    et: EventDataType;
    /**
     * 命中判断 4. 触发检查的事件的id
     *
     * @remark
     * `eventID`
     *
     * 具体值根据事件类型不同，有以下几种：
     * - 进入、离开的page id
     * - 点击事件的目标 id
     * - 网络事件的目标 id（uri）
     * - 特殊，控件会在示例化的时候通过控件暴露的接口预埋控件id
     * 具体事件数据对象定义见：{@link EventData}
     */
    eid: PageID | EventID | NetworkURI;
    /**
     * 命中判断 5. 触发检查后，仍需满足conditions数组内的规则，才是完全命中
     *
     * @remark
     * `conditions`
     * 条件数组，每项是需要满足的条件结构体的声明，
     * 条件结构体见 {@link Condition}
     */
    cds: Array<Condition>;
    /**
     * 点位的上报日志名，日志中的name字段
     *
     * @remark
     * `logName`
     *
     * @example
     * ```ts
     * rule.name = 'N1_XX_XX_XX'
     * ```
     *
     * 点位标识仅仅是点位的id字符串，不能从里面解析任何逻辑
     * 它只是一个**点位日志的名字字段**
     */
    ln: string;
    /**
     * 点位私有字段列表
     *
     * @remark
     * `fileds`
     * 除了全局字段，点位还会包含点位自己的字段，此列表声明本点位包含哪些字段，
     * 这些字段的取值位置和最终字段名
     */
    fs: Array<Convertor>;
    /**
     * 点位文字描述
     * @remark
     * 后台配置与查看，不下发
     */
    define?: string;
    /**
     * act 枚举
     */
    act: ActType;
    /**
     * 扩展字段
     */
    [propName: string]: any;
}
/**
 * 点位匹配条件
 *
 * @remark
 * 条件由三部分组成
 * 目标 + 比较符 + 对比值
 */
export interface Condition {
    /**
     * 目标
     *
     * @remark
     * 描述从数据池取数据的位置，描述方式见：{@link DataDescriber}
     *
     */
    tar: DataDescriber;
    /**
     * 对比符
     *
     * @remark
     * `comparator`
     * 描述目标值和对比值的对比方式，枚举类型见：{@link Comparator}
     */
    c: Comparator;
    /**
     * 对比值
     *
     * @remark
     * `subject`
     * 用来与目标值做对比的对比值
     */
    s: Value;
}
/**
 * 字段转化器
 */
export interface Convertor {
    /**
     * 字段定义
     *
     * @remark
     * 后台配置与查看，不下发
     */
    define?: string;
    /**
     * 字段数据来源
     *
     * @remark
     * `from`
     * 描述从数据池取数据的位置，描述方式见：{@link DataDescriber}
     */
    fr: DataDescriber;
    /**
     * 字段名
     *
     * @remark
     * 日志中自定义字段名
     */
    to: string;
    /**
     * 预留字段
     * @remark
     * `transformer`
     */
    tf?: string;
}
/**
 * 资源描述器
 * 描述数据在数据池中的位置
 *
 * @example
 * ```jsonc
 * // 取全局数据中的fr字段
 * {
 *    "type": "global",
 *    "keys": [
 *      {"t": "dic", "v": "fr"}
 *    ]
 * }
 *
 * // 取点击事件数据中的来源id
 * {
 *    "type": "events",
 *    "et": "click",
 *    "keys": [
 *      {"t": "dic", "v": "id"}
 *    ]
 * }
 *
 * // 取网络数据中的接口 '/api/getBookDetail'的res.data.bookID
 * {
 *    "type": "networks",
 *    "uri": "/api/getBookDetail",
 *    "keys": [
 *      {"t": "dic", "v": "res"},
 *      {"t": "dic", "v": "data"},
 *      {"t": "dic", "v": "bookID"}
 *    ]
 * }
 *
 * // 取网络数据中的接口 '/api/getBookList'的res.data.list[2].detail.name
 * {
 *    "type": "networks",
 *    "uri": "/api/getBookList",
 *    "keys": [
 *      {"t": "dic", "v": "res"},
 *      {"t": "dic", "v": "data"},
 *      {"t": "dic", "v": "list"},
 *      // 数组键（索引值类型为number）
 *      {"t": "arr", "v": 2},
 *      {"t": "dic", "v": "detail"},
 *      {"t": "dic", "v": "name"}
 *    ]
 * }
 * ```
 *
 */
export interface DataDescriber {
    /**
     * 资源类型
     */
    ty: DataType;
    /**
     * 是否需要往前追溯，从当前DataPage的前第n个DataPage取数据。
     * 默认为0，则从当前DataPage取数据，
     *
     * 举例：若为1，则从上一个DataPage取数据
     *
     * @remark
     * `lookBack`
     *
     * max 2
     *
     * @default 0
     */
    lb: number;
    /**
     * 事件类型
     * @remark
     * `eventType`
     *
     * 当资源类型为事件时会带事件类型用于快速索引
     */
    et?: EventDataType;
    /**
     * 事件id
     *
     * @remark
     * `eventID`
     *
     * 当资源类型为事件时会带事件id用于快速索引
     */
    eid?: PageID | EventID | NetworkURI;
    /**
     * 事件类型
     * @remark
     * `uri`
     *
     * 当资源类型为网络时会带uri用于快速索引
     */
    u?: NetworkURI;
    /**
     * 键值列表
     * @remark
     * `keys`
     */
    ks: Array<Key>;
}
/**
 * 键
 */
export interface Key {
    /**
     * 键的类型
     * @remark
     *
     * 若对错误的数据类型进行取值，返回 空值
     */
    t: KeyType;
    v: string | number;
}
/**
 * 值
 */
export interface Value {
    /**
     * 值类型
     */
    t: ValueType;
    /**
     * 值内容
     */
    v: string | number;
}
